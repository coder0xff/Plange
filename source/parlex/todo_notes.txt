∅, the empty set
𝕀, the integers
ℕ, the natural numbers, the non-negative integers
𝕎, the whole numbers, the positive integers
𝔹, the booleans, { true, false }
𝒫, the power set
E: X → {ε} ∪ X, the function adding the "empty" element to a set
⊕: ℕ → 𝒫(ℕ), the sequence function x ↦ { y : y ∈ ℕ ∧ y < x }
	e.g.	⊕(0) = {}
	e.g.	⊕(3) = {0, 1, 2}
#(X), the cardinality of X
U*(x) ... x ∈ X, the union across sets
max*(x) ... x ∈ X, the maximum value
Σ*(x) ...  x ∈ X, summation of elements in X

-------------------------------------------------------------------------------------------------

n ∈ ℕ, the length of the input document
P := ⊕(n), the set of positions within the input document
P' := {1, 2, ... n}, the set of possible substring lengths
-------------------------------------------------------------------------------------------------

X, the set of arbitrary constants
	This metadata is used in algorithms adjacent to the algorithm evaluated here
	
Σ, the set of "recognizers"
	∀σ ∈ Σ
		σ: P → 𝒫(P'), a function taking a document position as input, and returning the matched substring lengths
	Here, P' is an important distinction from P. It permits only matched substrings of length greater than zero, which means any match must make progress through the document, advancing the read head.
		
T, the set of "terminals", a specialization of recognizers
	∀t ∈ T
		t.Δ ∈ ℕ, the length in characters
		t.f: P → 𝔹, the test function	
		t(p) = f(p) ? { Δ } : ∅ (To satisfy P → 𝒫(P') as required by recognizers)
	i.e.:
		string literals
		character classes where t.Δ = 1
		
A, the set of "state machines", a specialization of recognizers
	∀α ∈ A
		α.k ∈ 𝕎, the number of states
		α.δ : ⊕(α.k) × (Σ × X) → ⊕(α.k), the transition function
		α.w0 ∈ ⊕(α.k), the start state
		α.f ∈ ⊕(α.k) ∧ 0 < f, the number of accept states such that states {α.k-1, α.k-2, ... α.k-f} are accept states
		α(p) ???

-------------------------------------------------------------------------------------------------

Σ = T ∪ A
β ∈ Σ, the "root" recognizer of the grammar
σ := #(Σ), the number of recognizers used by the grammar

We assign an arbitrary sequential ordering to the recognizers for constant-time lookups.
	L := ⊕(σ), L ↔ Σ, the set of unique identifiers of elements of Σ
	L' : L → Σ, the function mapping an unique integer to an element of Σ

-------------------------------------------------------------------------------------------------

R, the set of possible "producers"
	∀r ∈ R
		r.p ∈ P, the document position to try to find matches for r.l
		r.l ∈ L, the recognizer id to find a match for
		r.o ∈ 𝒫(P), the matched substring lengths, which is constructed one element at a time during execution
		r.Y, the set of subcriptions
			∀y ∈ Y
				y.z ∈ P×L, the subscribed consumer
				y.c, a context (defined later)
				y.x ∈ X, a leaf				

M': P × L → E(R), a two dimensional array sparsly populated by the elements of R for constant-time lookups.
M: P × L → R, an imperative function populating M' as needed.
β' := M((0, β)), the root producer, i.e. the root recognizer at document position 0
H := P × L × P', the set of possible "matches", each indicating a substring that was successfully parsed

K, the set of possible "tokens", a specialization of producers
	∀k ∈ K
		k.l ∈ L, the recognizer id, referencing a terminal, to find a match for
		k.p ∈ P, the document position to try to find a match for k.l		
		k.o ∈ 𝒫(P) ∧ 0 <= #(k.o) <= 1, the matched substring lengths

S, the set of possible "subjobs", a specialization of producers (subjobs are also "consumers")
	∀s ∈ S
		s.l ∈ L, the recognizer id, referencing a state machine, to find matches for
		s.p ∈ P, the document position to try to find matches for s.l
		s.o ∈ 𝒫(𝕎), the matched substring lengths
		s.C, the set of "contexts" for this subjob (a snapshot of a state-machine evaluation)
			∀c ∈ s.C
				c.ψ ∈ P, the document read head
				c.φ ∈ E(s.Θ), the prior context, if any	
				c.t ∈ E(H), the match that produced this DFA configuration, if any
				c.x ∈ E(X), the leaf that corresponds to the transition that produced this DFA configuration, if any

R = K ∪ S, the set of possible "producers"
r0 ∈ R, the "root" recognizer, which the entire document will be parsed on

-------------------------------------------------------------------------------------------------

A recognizer M(p, l) is instantiated iff either
	M(p, l) = β', or		
	∃α ∈ A, ∃w ∈ ⊕(α.k), ∃x ∈ X, ∃s ∈ S, ∃c ∈ s.C, c.ψ = p ∧ α.δ(s, (w, x)) ∈ ⊕(α.k) 
		A recognizer is only created if a state machine "asks" for it as a transition symbol.

M(0, β) = β' is always instantiated and seeds the parsing algorithm.

-------------------------------------------------------------------------------------------------

δ' : A×ℕ → 𝒫(Σ×X), the function returning the possible transitions of a given DFA at a given state
	δ'(α, s) = { (q, x) : ∀q ∈ Σ, ∀x ∈ X, α.δ(s, (q, x)) ∈ ⊕(α.k) }

-------------------------------------------------------------------------------------------------

D, the set of work items (actually implemented as a concurrent queue) which are only applicable to subjob processing
	∀d ∈ D
		d.z ∈ Z, the producer identifier, which references a subjob
		d.c ∈ M(d.z).C, the context
		(p, l) = d.z (unpack the identifier)
		d.s ∈ ⊕(L'(M(d.z).l).k), the state in the state-machine
		
		When a work item is processed, the domain of the transition function Q, of the specified state-machine is enumerated.
			α = L'(M(d.z).l), the referenced state machine
			∀(q, x) ∈ δ'(α, d.s)
				r = M((p, q)) (the producer at document position p, and recognizer q)
				y ∈ r.Y, add a subscription element into the target producer
					y.z = d.z
					y.c = d.c
					y.x = x
							
∀r ∈ R, for each producer
	Upon matching some substring of length l, create new work items from subscriptions
		∀y ∈ r.Y, for each subscription	
			d ∈ D, add work item
			d.z = y.z			
			d.c.ψ = r.p + l
			d.c.φ = y.c
			d.c.t = ((r.p, r.l), n)
			d.c.x = y.x
			
The above describes a producer-consumer system wherein matching a substring creates new work items depending on said substring, and the work items in turn yield additional match substrings. This affect propogates from the leaf nodes to the root node of the document syntax (assuming the document satisfies the grammar). Notably, the dependency graph is generated top down resembling an LL parser, but the events bubble up from the bottom like an LR parser. The work queue lends itself to asymptotic analysis. That is, an upper bound on the work items that will be submitted is an upper bound of the execution time processing state-machines. By recursively expanding the terms within a work item, we produce a description of the items in D. Trivially, we also find an execution time bounds on the processing of terminals. The sum of these is the bounds on total execution time.

First we determine the number of contexts a subjob s may have.
	Each context stores the read head position, giving the first factor, n.
	
	α = L'(s.l), the state machine referenced by s
	Considered alone, the set of possible paths through α is unbounded because it may have cyclical portions. However, each transition within the state machine is driven by a match to which it subscribed. Since a match must advance the read head, each transition does as well. Thus, the set of possible paths through α is bounded by α.k^n.

	Each context has a nullable pointer to another context. This pointer has properties useful in analysis.
		1. If not null, the pointer must reference a context within the the same subjob.
		2. This linked list is bounded by n, because each match, and therefore transition, must advance the read head.
		3. The last element of the linked list (which is the earliest context)
	
Each context is created from some 

-------------------------------------------------------------------------------------------------
∀d ∈ D
	d.z: P×L
	d.c:
		d.c.ψ: P
		d.c.φ: 
			d.c.φ.φ (because each match must advance the read head, the context chain may be no longer that n)
work item:
	
	document_position, recognizer, context.prior, context.current_document_position, E(from_transition), E(leaf), dfa_state
	
	
	
	
	
	
	
	
	
	
∀s ∈ S
	from the definition of "context"
		#(s.C) <= n × #(E(s.C)) × #(E(P×L×P)) × E(X)
		#(s.C) <= n x #(E(s.C)) × (n × σ ×
















The items in D are dependent on the individual elements within A. To simplify analysis we substitute a fictitious "worst" state machine, ω.
	
	ω.k = max(α.k), ∀α ∈ A
	#(δ'(ω, s)) = σ × #(X) (s is irrelevant)
	
This state machine, being at least as large in state and transition count as all other real state machines, produces a generous estimation of #(D). One considers that this might worsen the result of the asymptotic analysis. However, we will see that such constants fall out of the big O notation.

∀s ∈ S
	from the definition of "context"
		#(s.C) <= n × #(E(s.C)) × #(E(P×L×P)) × E(X)
		#(s.C) <= n x #(E(s.C)) × (n × σ ×
		
Again, we would like to eliminate discreet collections from consideration in describing the set of all contexts, C.

	#(C) <= n × #(E(C)) × #(E(P×L×P')) × #(E(X))






For each subscription there may be n values consumed




total subscription count <= n*|A|*max(size of domain of δ)

Total work item count <= n*(total subscription count)
Total terminal match count <= n*|T|

An array of atomic RMW pointers of dimensions stores

M := Z×𝕎, The set of possible "matches" indicating the document position, the recognizer that matched, and the number of consumed characters
C: E(C)×P×M×(

C: L → 

C : P*L →   is the set of DFA contexts of a subjob z ∈ Z

The possible children of context c(x,z,h,l), D(x,z,h,l) = { c(y,z,i,m) | ∀y ∈ I ∧ ∀m ∈ Q(p) ∧ x < y ∧ i = c(x,z,h,l)::h }

The possible ancestors of context c(x,z,h,l), H(x,z,h,l) = { c(y,z,i,m) | c(x,z,h,l) ∈ D(y,z,i,m) }

DFA contexts owned by subjob z, C(z) = { c(x,z,h,l) | ∀x ∈ I ∧ h ⊆ C(z)* ∧ z(i, p) = z ∧ l ∈ Q(p) };

The first context created by a subjob:
	c(i,z(i,p),{}*,q0(p))

No transition can match the null string, and each transition creates a child context that must have a later document position. Therefore:
∀c(x,z,h,l) ∈ C(z), z(i,p) = z, |h| <= i ∧ | c(x,z,h,l) | <= n - x

Or differently,
	∀z ∈ Z, | C(z) | < ∞

Thus:
	| { c | ∀c ∈ C(z), ∀z ∈ Z } | < ∞
Which proves termination
