ADDRESS_OF=("address_of(" ws IDENTIFIER ws ")").
ALLOC=("alloc" ws EXPLICIT_TYPE_DEREFERENCE ws "(" ws ARGUMENT_LIST ws ")").
ARGUMENT_DEFINITION=(([EXPLICIT_TYPE_DEREFERENCE ws]) SYMBOL ([ws "=" ws EXPRESSION])).
ARGUMENT_DEFINITION_LIST=([ARGUMENT_DEFINITION {(ws "," ws ARGUMENT_DEFINITION)}]).
ARGUMENT_LIST=([EXPRESSION {(ws "," EXPRESSION)}]).
ARRAY_LITERAL=("[" ws ([EXPRESSION {(ws "," ws EXPRESSION)}]) ws "]").
ARRAY_ACCESSOR_EXPRESSION=(EXPRESSION ws "[" ws ARGUMENT_LIST ws "]").
ASSIGNMENT_STATEMENT=(LVALUE_EXPRESSION ws "<-" ws EXPRESSION ws ";").
AT_KEYWORD="at".
BINARY_OPERATOR=COMPOSITION_OP|FUNCTION_ARROW_OP|PLUS_MINUS_OP|SUM_OP|DIFFERENCE_OP|PRODUCT_OP|QUOTIENT_OP|MODULO_OP|EXPONENTIATION_OP|CONJUNCTION_OP|BITWISE_AND_OP|DISJUNCTION_OP|BITWISE_OR_OP|LOGICAL_XOR_OP|BITWISE_XOR_OP|EXPONENTIATION_OP|IMPLICATION_OP|IFF_OP|SET_MEMBERSHIP_OP|SET_NONMEMBERSHIP_OP|SET_CONTAINMENT_OP|SET_NONCONTAINMENT_OP|SUBSET_OP|STRICT_SUBSET_OP|SUPERSET_OP|STRICT_SUPERSET_OP|UNION_OP|INTERSECTION_OP|SYMMETRIC_DIFFERENCE_OP|LESS_THAN_OP|LESS_THAN_EQUAL_TO_OP|EQUAL_TO_OP|GREATER_THAN_EQUAL_TO_OP|GREATER_THAN_OP|NOT_EQUAL_OP.
BITWISE_AND_OP="&".
BITWISE_OR_OP="|".
BITWISE_XOR_OP="⊕".
BLOCK_LITERAL=("{" ws {(STATEMENT ws)} "}").
BREAK_STATEMENT=("break" ws ";").
CATCH_BLOCK="catch" ws "(" ws EXPRESSION ws ")" ws BLOCK_LITERAL.
CEILING_EXPRESSION=("⌈" ws EXPRESSION ws "⌉").
CLASS_LITERAL=("class" ws [ "inheriting" whiteSpaces INHERITANCE { ws "," ws INHERITANCE } ] "{" ws {(CLASS_MEMBER ws ";" ws)} "}").
CLASS_MEMBER=[XML_DOC_STRING ws] (["static" whiteSpaces] [VISIBILITY_MODIFIER whiteSpaces] (CLASS_MEMBER_DECLARATION|CLASS_MEMBER_DEFINITION) [ ws AT_KEYWORD ws EXPRESSION]).
CLASS_MEMBER_DECLARATION=EXPLICIT_TYPE_DEREFERENCE ws SYMBOL.
CLASS_MEMBER_DEFINITION=(EXPLICIT_TYPE_DEREFERENCE|DEDUCED_TYPE_DEREFERENCE) ws SYMBOL ws DEFINED_AS_OP ws EXPRESSION.
COMPOSITION_OP="○".
CONDITIONAL_TERNARY_EXPRESSION=(EXPRESSION ws "?" ws EXPRESSION ws ":" ws EXPRESSION).
CONJUNCTION_OP="∧".
CONTINUE_STATEMENT=("continue" ws ";").
DEDUCED_DECLARATION_RELATION_STATEMENT=(DEDUCED_TYPE_DEREFERENCE ws SYMBOL ws RELATIONAL_OP ws EXPRESSION ws ";").
DEDUCED_TYPE_DEREFERENCE=("<" ([ws VOLATILE_KEYWORD]) ws ">").
DEFINED_AS_OP=":=".
DEFINITION_STATEMENT=[XML_DOC_STRING ws] (([(EXPLICIT_TYPE_DEREFERENCE|DEDUCED_TYPE_DEREFERENCE) ws]) SYMBOL ws DEFINED_AS_OP ws EXPRESSION ws ";").
DEREFERENCE_EXPRESSION=("dereference(" EXPRESSION ")").
DERIVATIVE_EXPRESSION=IMPLICIT_DERIVATIVE_EXPRESSION|EXPLICIT_DERIVATIVE_EXPRESSION.
DIFFERENCE_OP="-".
DIMENSIONAL_SYMBOL={(letter {letter})|"/"|("^" INTEGER_LITERAL)}.
DIMENSIONED_NUMERIC_LITERAL=(NUMERIC_LITERAL DIMENSIONAL_SYMBOL).
DISJUNCTION_OP="∨".
DO_UNTIL_STATEMENT=("do" ws BLOCK_LITERAL ws "until" ws "(" ws EXPRESSION ws ")").
DO_WHILE_STATEMENT=("do" ws BLOCK_LITERAL ws "while" ws "(" ws EXPRESSION ws ")").
DYNAMIC_CAST_EXPRESSION=("dynamic_cast" ws EXPLICIT_TYPE_DEREFERENCE ws "(" EXPRESSION ")").
ELSE_SUFFIX=("else" ws BLOCK_LITERAL) | ("elif" ws "(" EXPRESSION ")" BLOCK_LITERAL [ELSE_SUFFIX]).
EXTERN="extern " ws FUNCTION_TYPE_CONSTRUCTOR ws SYMBOL.
EQUAL_TO_OP="=".
EXPLICIT_DECLARATION_RELATION_STATEMENT=(EXPLICIT_TYPE_DEREFERENCE ws SYMBOL ws RELATIONAL_OP ws EXPRESSION ws ";").
EXPLICIT_DECLARATION_STATEMENT=(EXPLICIT_TYPE_DEREFERENCE ws SYMBOL ws ";").
EXPLICIT_DERIVATIVE_EXPRESSION=(EXPRESSION ws "d/d" EXPRESSION).
EXPLICIT_TYPE_DEREFERENCE=("<" ([ws VOLATILE_KEYWORD]) ws EXPRESSION ws ">").
EXPONENTIATION_OP="^".
EXPRESSION=PARENTHETICAL_EXPRESSION|INFIX_EXPRESSION|FUNCTION_CALL|ARRAY_ACCESSOR_EXPRESSION|PIPE_PARENTHETICAL_EXPRESSION|STATIC_CAST_EXPRESSION|NUMERIC_LITERAL|stringLiteral|MULTILINE_STRING_LITERAL|DIMENSIONED_NUMERIC_LITERAL|STATIC_CAST_EXPRESSION|DERIVATIVE_EXPRESSION|SUMMATION_EXPRESSION|PRODUCT_INTEGRAL_EXPRESSION|INTEGRAL_EXPRESSION|PRODUCT_INTEGRAL_EXPRESSION|LINE_INTEGRAL_EXPRESSION|SURFACE_INTEGRAL_EXPRESSION|INTERVAL_EXPRESSION|SET_BUILDER_EXPRESSION|SET_LITERAL|RESERVED_CONSTANT|LIST_LITERAL|MAGNITUDE_EXPRESSION|FLOOR_EXPRESSION|CEILING_EXPRESSION|NEAREST_INTEGER_EXPRESSION|POUND_CARDINALITY_EXPRESSION|NOT_EXPRESSION|NEGATION_EXPRESSION|IDENTIFIER|FUNCTION_TYPE_CONSTRUCTOR|FUNCTION_LITERAL|IF|MEMBER_ACCESSOR_EXPRESSION|TYPEOF_EXPRESSION|ALLOC|NEW_EXPRESSION|ADDRESS_OF|DEREFERENCE_EXPRESSION|POINTER_TO_EXPRESSION|TUPLE_LITERAL|ARRAY_LITERAL|CLASS_LITERAL.
FINALLY_BLOCK="finally" ws BLOCK_LITERAL.
FLOAT_LITERAL=FLOAT_LITERAL_0|FLOAT_LITERAL_1.
FLOAT_E=("E" (["+"|"-"]) decimalDigit {decimalDigit}).
FLOAT_LITERAL_0=((["-"]) decimalDigit {decimalDigit} (["." {decimalDigit} FLOAT_E])).
FLOAT_LITERAL_1=((["-"]) "." decimalDigit {decimalDigit} ([FLOAT_E])).
FLOOR_EXPRESSION=("⌊" ws EXPRESSION ws "⌋").
FOR_STATEMENT=("for" ws "(" ws ([EXPRESSION|BLOCK_LITERAL]) ws ";" ws ([EXPRESSION|BLOCK_LITERAL]) ws ";" ws ([EXPRESSION|BLOCK_LITERAL]) ws ")" ws BLOCK_LITERAL).
FOREACH_STATEMENT=("foreach" ws "(" ([ws TYPE_DEREFERENCE]) ws SYMBOL ws "in" ws EXPRESSION ws ")" ws BLOCK_LITERAL).
FREE_STATEMENT=("free" ws EXPRESSION ws ";").
FUNCTION_ARROW_OP="→"|"->".
FUNCTION_CALL=(EXPRESSION ws "(" ws ARGUMENT_LIST ws ")").
FUNCTION_LITERAL=(([("imperative"|"pure"|"opaque") ws]) (["(" ARGUMENT_DEFINITION_LIST ")" ws]) BLOCK_LITERAL).
FUNCTION_TYPE_CONSTRUCTOR=(EXPRESSION {(ws "," ws EXPRESSION)} ws FUNCTION_ARROW_OP ws EXPRESSION).
GREATER_THAN_EQUAL_TO_OP="≥"|">=".
GREATER_THAN_OP=">".
HEX_LITERAL=("0x" hexDigit {hexDigit}).
IDENTIFIER=({(SYMBOL ws SCOPE_TRAVERSAL_OP ws)} SYMBOL)|THIS_KEYWORD.
IF=("if" ws "(" ws EXPRESSION ws ")" ws BLOCK_LITERAL [ELSE_SUFFIX]).
IFF_OP="⇔"|"<=>".
IMPLICATION_OP="⇒"|"=>".
IMPLICIT_DERIVATIVE_EXPRESSION=(EXPRESSION "’").
IMPORT_STATEMENT="import " ws IDENTIFIER ws ";".
INFIX_EXPRESSION=(EXPRESSION ws BINARY_OPERATOR ws EXPRESSION).
INHERITANCE=[VISIBILITY_MODIFIER whiteSpaces] IDENTIFIER.
INTEGER_LITERAL=((["-"]) NON_NEGATIVE_INTEGER_LITERAL).
INTEGRAL_EXPRESSION=("∫(" ws EXPRESSION ([ws "," ws EXPRESSION ([ws "," ws EXPRESSION])]) ws ")").
INTERSECTION_OP="∩".
INTERVAL_EXPRESSION=(("("|"[") ws EXPRESSION ws "to" ws EXPRESSION ws (")"|"]")).
LESS_THAN_EQUAL_TO_OP="≤"|"<=".
LESS_THAN_OP="<".
LINE_INTEGRAL_EXPRESSION=("∮(" ws EXPRESSION ([ws "," ws EXPRESSION ([ws "," ws EXPRESSION])]) ws ")").
LIST_LITERAL=("[" ws EXPRESSION {(ws "," ws EXPRESSION)} ws "]").
LOGICAL_XOR_OP="⊻".
LVALUE_EXPRESSION=EXPRESSION.
MAGNITUDE_EXPRESSION=("|" ws EXPRESSION ws "|").
MAPS_TO_TERNARY_EXPRESSION=(EXPRESSION ws ":" ws EXPRESSION ws "↦" ws EXPRESSION).
MATRIX_SET=("𝕄" "(" INTEGER_LITERAL "," INTEGER_LITERAL ")").
MEMBER_ACCESSOR_EXPRESSION=(EXPRESSION "." IDENTIFIER).
MODULO_OP="%".
MULTILINE_STRING_LITERAL=("***" newline {any} newline "***")|("*" MULTILINE_STRING_LITERAL "*").
NEAREST_INTEGER_EXPRESSION=("||" ws EXPRESSION ws "||")|("⌊" ws EXPRESSION ws "⌉").
NEGATION_EXPRESSION=("-" EXPRESSION).
NEW_EXPRESSION=("new" ws EXPLICIT_TYPE_DEREFERENCE ws "(" ws ARGUMENT_LIST ws ")").
NON_NEGATIVE_INTEGER_LITERAL=(number {number}).
NOT_EQUAL_OP="≠"|"!=".
NOT_EXPRESSION=("!" ws EXPRESSION).
NUMERIC_LITERAL=INTEGER_LITERAL|FLOAT_LITERAL|HEX_LITERAL.
PARENTHETICAL_EXPRESSION=("(" ws EXPRESSION ws ")").
PIPE_PARENTHETICAL_EXPRESSION=("|" ws EXPRESSION ws "|").
PLATFORM_BLOCK="_" SYMBOL BLOCK_LITERAL.
PLUS_MINUS_OP="±".
POINTER_TO_EXPRESSION=("pointer_to" EXPLICIT_TYPE_DEREFERENCE).
POUND_CARDINALITY_EXPRESSION=("#" ws EXPRESSION).
PREDICATE_OP=FUNCTION_ARROW_OP|IMPLICATION_OP|IFF_OP|SET_MEMBERSHIP_OP|SET_NONMEMBERSHIP_OP|SET_CONTAINMENT_OP|SET_NONCONTAINMENT_OP|SUBSET_OP|STRICT_SUBSET_OP|SUPERSET_OP|STRICT_SUPERSET_OP|RELATIONAL_OP.
PRODUCT_OP="·"|"*"|"×".
PRODUCT_INTEGRAL_EXPRESSION=("∏(" ws EXPRESSION ([ws "," ws EXPRESSION ([ws "," ws EXPRESSION])]) ws ")").
QUOTIENT_OP="÷"|"/".
REINTERPRET_CAST_EXPRESSION=("reinterpret_cast" ws EXPLICIT_TYPE_DEREFERENCE ws "(" EXPRESSION ")").
RELATIONAL_OP=LESS_THAN_OP|LESS_THAN_EQUAL_TO_OP|EQUAL_TO_OP|GREATER_THAN_EQUAL_TO_OP|GREATER_THAN_OP|NOT_EQUAL_OP.
RESERVED_CONSTANT="𝑒"|"e"|"π"|"ℕ"|"ℂ"|"ℚ"|"ℝ"|"ℤ"|"𝔹"|"𝕎"|"ℍ"|"𝕆"|MATRIX_SET|"ⅈ"|"𝕀"|"∅"|"ℵ(0)".
RETURN_STATEMENT=("return" ws ([EXPRESSION ws]) ";").
SCOPE_TRAVERSAL_OP="::".
SET_BUILDER_EXPRESSION=("{" ws EXPRESSION ws ":" ws EXPRESSION "}").
SET_CONTAINMENT_OP="∋".
SET_LITERAL=("{" ws EXPRESSION {(ws "," ws EXPRESSION)} ws "}").
SET_MEMBERSHIP_OP="∈".
SET_NONCONTAINMENT_OP="∌".
SET_NONMEMBERSHIP_OP="∉".
STATEMENT=(EXPRESSION ";")|ASSIGNMENT_STATEMENT|BREAK_STATEMENT|CONTINUE_STATEMENT|DEDUCED_DECLARATION_RELATION_STATEMENT|DEFINITION_STATEMENT|DO_UNTIL_STATEMENT|DO_WHILE_STATEMENT|EXPLICIT_DECLARATION_RELATION_STATEMENT|EXPLICIT_DECLARATION_STATEMENT|FOR_STATEMENT|FOREACH_STATEMENT|FREE_STATEMENT|TRY_CATCH_FINALLY_STATEMENT|RETURN_STATEMENT|UNTIL_STATEMENT|WHILE_STATEMENT|IF|PLATFORM_BLOCK|IMPORT_STATEMENT.
STRICT_SUBSET_OP="⊂".
STRICT_SUPERSET_OP="⊃".
SUBSET_OP="⊆".
SUM_OP="+".
SUMMATION_EXPRESSION=("Σ(" ws EXPRESSION ([ws "," ws EXPRESSION ([ws "," ws EXPRESSION])]) ws ")").
SUPERSET_OP="⊇".
SURFACE_INTEGRAL_EXPRESSION=("∫∫(" ws EXPRESSION ([ws "," ws EXPRESSION ([ws "," ws EXPRESSION])]) ws ")").
SYMBOL=(letter {alphanumeric}).
SYMMETRIC_DIFFERENCE_OP="⊖".
SYNTAX=(ws {(STATEMENT ws)}).
THIS_KEYWORD="this".
TRY_CATCH_FINALLY_STATEMENT="try" ws BLOCK_LITERAL (({ ws CATCH_BLOCK} ws FINALLY_BLOCK)|(ws CATCH_BLOCK {ws CATCH_BLOCK})) ws ";".
TUPLE_LITERAL=("(" ws EXPRESSION ws ", " {(ws EXPRESSION ws ", " )} [ws EXPRESSION] ws ")").
TYPE_DEREFERENCE=EXPLICIT_TYPE_DEREFERENCE|DEDUCED_TYPE_DEREFERENCE.
TYPEOF_EXPRESSION=("typeof(" ws EXPRESSION ws ")").
STATIC_CAST_EXPRESSION=(EXPLICIT_TYPE_DEREFERENCE ws "(" ws EXPRESSION ws ")").
UNION_OP="∪".
UNTIL_STATEMENT=("until" ws "(" ws EXPRESSION ws ")" ws BLOCK_LITERAL [ELSE_SUFFIX]).
VISIBILITY_MODIFIER="public"|"protected"|"private"|"internal".
VOLATILE_KEYWORD="volatile".
WHILE_STATEMENT=("while" ws "(" ws EXPRESSION ws ")" ws BLOCK_LITERAL [ELSE_SUFFIX]).
ws=([whiteSpaces]).
XML_DOC_STRING=("```" {any} "```")|("`" XML_DOC_STRING "`").
