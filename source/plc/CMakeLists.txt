set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/Modules/")
include(PrecompiledHeader)

#dependency on LLVM
set(LLVM_VERSION 3.8.1)
if(${MSVC})
	find_package(LLVM CONFIG QUIET)
	if(NOT ${LLVM_FOUND})
		include(msvc_fetch_llvm)
	endif()
	include(msvc_fetch_mpir)
else()
	find_package(LLVM CONFIG)
endif()

#Prep build for symengine
set(PLC_SYMENGINE_BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/symengine.build")
file(MAKE_DIRECTORY "${PLC_SYMENGINE_BINARY_DIR}")
execute_process(COMMAND "${CMAKE_COMMAND}" "${CMAKE_CURRENT_SOURCE_DIR}/symengine" "-G" "${CMAKE_GENERATOR}" "-DGMP_LIBRARIES=${GMP_LIBRARIES}" "-DGMP_INCLUDE_DIRS=${GMP_INCLUDE_DIRS}" "-DGMP_TARGETS=${GMP_LIBRARIES}" WORKING_DIRECTORY ${PLC_SYMENGINE_BINARY_DIR} RESULT_VARIABLE PLC_SYMENGINE_CMAKE_RESULT)
if(${PLC_SYMENGINE_CMAKE_RESULT})
	message(FATAL_ERROR "Unable to configure symengine. Check output for errors.")
endif()
add_custom_target(symengine_build
	"${CMAKE_COMMAND}" "--build" "${PLC_SYMENGINE_BINARY_DIR}"
)

include_directories(${CMAKE_SOURCE_DIR}/parlex/include)
include_directories(${CMAKE_SOURCE_DIR}/utilities)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}) #for tclap
include_directories(${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})

set(SOURCES
	"src/AdditionExp.cpp"
	"src/AddSubExp.cpp"
	"src/AllExp.cpp"
	"src/AllocationExp.cpp"
	"src/AndExp.cpp"
	"src/ArrayExp.cpp"
	"src/AsmFunctionExp.cpp"
	"src/Assertion.cpp"
	"src/Assignment.cpp"
	"src/BijectionExp.cpp"
	"src/BinaryOpExp.cpp"
	"src/BitAndExp.cpp"
	"src/BitOrExp.cpp"
	"src/BitXorExp.cpp"
	"src/BoolExp.cpp"
	"src/Break.cpp"
	"src/CardinalityExp.cpp"
	"src/CastExp.cpp"
	"src/CastsExp.cpp"
	"src/CeilingExp.cpp"
	"src/CollectionExp.cpp"
	"src/ComplementExp.cpp"
	"src/CompositionExp.cpp"
	"src/CompoundExp.cpp"
	"src/ConditionalExp.cpp"
	"src/Constant.cpp"
	"src/Continue.cpp"
	"src/CrossProductExp.cpp"
	"src/Declaration.cpp"
	"src/Definition.cpp"
	"src/DeltaExp.cpp"
	"src/DimensionalNumberExp.cpp"
	"src/DivisionExp.cpp"
	"src/Do.cpp"
	"src/DotProductExp.cpp"
	"src/EqualityExp.cpp"
	"src/Errors.cpp"
	"src/execution_context.cpp"
	"src/ExistsExp.cpp"
	"src/ExistsOneExp.cpp"
	"src/ExponentiationExp.cpp"
	"src/Expression.cpp"
	"src/ExpressionStatement.cpp"
	"src/FactorialExp.cpp"
	"src/FloorExp.cpp"
	"src/For.cpp"
	"src/ForCollection.cpp"
	"src/Free.cpp"
	"src/FunctionExp.cpp"
	"src/FunctionModel.cpp"
	"src/GreaterThanExp.cpp"
	"src/HasExp.cpp"
	"src/IdentifierExp.cpp"
	"src/IfExp.cpp"
	"src/IffExp.cpp"
	"src/ImplicationExp.cpp"
	"src/Import.cpp"
	"src/InequalityExp.cpp"
	"src/InExp.cpp"
	"src/IntegerDivisionExp.cpp"
	"src/IntersectionExp.cpp"
	"src/InvocationExp.cpp"
	"src/IsExp.cpp"
	"src/KleeneStarExp.cpp"
	"src/LesserThanExp.cpp"
	"src/ListExp.cpp"
	"src/Loop.cpp"
	"src/MagnitudeExp.cpp"
	"src/main.cpp"
	"src/MapExp.cpp"
	"src/MapsToExp.cpp"
	"src/MemberAccessExp.cpp"
	"src/ModulationExp.cpp"
	"src/MultiplicationExp.cpp"
	"src/NandExp.cpp"
	"src/NearestIntegerExp.cpp"
	"src/NegationExp.cpp"
	"src/NonNegativeNumberExp.cpp"
	"src/NorExp.cpp"
	"src/NotExp.cpp"
	"src/NotGreaterThanExp.cpp"
	"src/NotHasExp.cpp"
	"src/NotInExp.cpp"
	"src/NotLesserThanExp.cpp"
	"src/NullCoalesceExp.cpp"
	"src/OrExp.cpp"
	"src/ParentExp.cpp"
	"src/ParentheticalExp.cpp"
	"src/plange.cpp"
	"src/plange_grammar.cpp"
	"src/PostDecExp.cpp"
	"src/PostIncExp.cpp"
	"src/PreDecExp.cpp"
	"src/PreIncExp.cpp"
	"src/PrependExp.cpp"
	"src/ProperSubsetExp.cpp"
	"src/ProperSupersetExp.cpp"
	"src/PropertyExp.cpp"
	"src/RadicalExp.cpp"
	"src/RangeExp.cpp"
	"src/Relation.cpp"
	"src/Return.cpp"
	"src/Scope.cpp"
	"src/SetComprehensionExp.cpp"
	"src/SetExp.cpp"
	"src/ShiftLExp.cpp"
	"src/ShiftRExp.cpp"
	"src/SideEffect.cpp"
	"src/SourceCode.cpp"
	"src/Statement.cpp"
	"src/stdafx.cpp"
	"src/StringExp.cpp"
	"src/SubsetExp.cpp"
	"src/SubtractionExp.cpp"
	"src/SupersetExp.cpp"
	"src/SymmetricDifferenceExp.cpp"
	"src/Thread.cpp"
	"src/Throw.cpp"
	"src/Try.cpp"
	"src/TupleExp.cpp"
	"src/TypeExp.cpp"
	"src/UnaryOpExp.cpp"
	"src/UnionExp.cpp"
	"src/value.cpp"
	"src/Variable.cpp"
	"src/VectorNormExp.cpp"
	"src/Warnings.cpp"
	"src/XorExp.cpp")

set(HEADERS
	"include/SetComprehensionExp.hpp"
	"include/ModulationExp.hpp"
	"include/CardinalityExp.hpp"
	"include/NandExp.hpp"
	"include/CompoundExp.hpp"
	"include/Warnings.hpp"
	"include/ParentExp.hpp"
	"include/SubtractionExp.hpp"
	"include/ProperSupersetExp.hpp"
	"include/Errors.hpp"
	"include/NonNegativeNumberExp.hpp"
	"include/plange.hpp"
	"include/For.hpp"
	"include/MagnitudeExp.hpp"
	"include/PreDecExp.hpp"
	"include/stdafx.hpp"
	"include/ConditionalExp.hpp"
	"include/BitOrExp.hpp"
	"include/ExistsOneExp.hpp"
	"include/ExponentiationExp.hpp"
	"include/ListExp.hpp"
	"include/BitAndExp.hpp"
	"include/Free.hpp"
	"include/ForCollection.hpp"
	"include/SetExp.hpp"
	"include/Scope.hpp"
	"include/MemberAccessExp.hpp"
	"include/CastExp.hpp"
	"include/FunctionExp.hpp"
	"include/Import.hpp"
	"include/ParentheticalExp.hpp"
	"include/NearestIntegerExp.hpp"
	"include/DimensionalNumberExp.hpp"
	"include/MapExp.hpp"
	"include/NotExp.hpp"
	"include/SupersetExp.hpp"
	"include/PreIncExp.hpp"
	"include/PostIncExp.hpp"
	"include/exec-stream.hpp"
	"include/StringExp.hpp"
	"include/CompositionExp.hpp"
	"include/NotHasExp.hpp"
	"include/MultiplicationExp.hpp"
	"include/Statement.hpp"
	"include/AdditionExp.hpp"
	"include/Loop.hpp"
	"include/Relation.hpp"
	"include/SourceCode.hpp"
	"include/ExistsExp.hpp"
	"include/NotInExp.hpp"
	"include/InequalityExp.hpp"
	"include/PostDecExp.hpp"
	"include/InExp.hpp"
	"include/MapsToExp.hpp"
	"include/ProperSubsetExp.hpp"
	"include/TupleExp.hpp"
	"include/Expression.hpp"
	"include/NotLesserThanExp.hpp"
	"include/SideEffect.hpp"
	"include/AllExp.hpp"
	"include/IdentifierExp.hpp"
	"include/UnionExp.hpp"
	"include/FactorialExp.hpp"
	"include/AsmFunctionExp.hpp"
	"include/CeilingExp.hpp"
	"include/LesserThanExp.hpp"
	"include/Do.hpp"
	"include/ExpressionStatement.hpp"
	"include/RadicalExp.hpp"
	"include/DeltaExp.hpp"
	"include/Assignment.hpp"
	"include/PropertyExp.hpp"
	"include/BitXorExp.hpp"
	"include/ArrayExp.hpp"
	"include/VectorNormExp.hpp"
	"include/NorExp.hpp"
	"include/CrossProductExp.hpp"
	"include/ComplementExp.hpp"
	"include/Variable.hpp"
	"include/Definition.hpp"
	"include/NullCoalesceExp.hpp"
	"include/DotProductExp.hpp"
	"include/BoolExp.hpp"
	"include/SymmetricDifferenceExp.hpp"
	"include/Declaration.hpp"
	"include/SubsetExp.hpp"
	"include/PrependExp.hpp"
	"include/value.hpp"
	"include/AddSubExp.hpp"
	"include/ShiftLExp.hpp"
	"include/Constant.hpp"
	"include/plange_grammar.hpp"
	"include/IsExp.hpp"
	"include/Break.hpp"
	"include/Return.hpp"
	"include/CollectionExp.hpp"
	"include/AndExp.hpp"
	"include/Thread.hpp"
	"include/ShiftRExp.hpp"
	"include/InvocationExp.hpp"
	"include/OrExp.hpp"
	"include/Try.hpp"
	"include/IntersectionExp.hpp"
	"include/RangeExp.hpp"
	"include/Throw.hpp"
	"include/TypeExp.hpp"
	"include/CastsExp.hpp"
	"include/IfExp.hpp"
	"include/HasExp.hpp"
	"include/IntegerDivisionExp.hpp"
	"include/XorExp.hpp"
	"include/BinaryOpExp.hpp"
	"include/DivisionExp.hpp"
	"include/EqualityExp.hpp"
	"include/BijectionExp.hpp"
	"include/NegationExp.hpp"
	"include/Continue.hpp"
	"include/NotGreaterThanExp.hpp"
	"include/ImplicationExp.hpp"
	"include/GreaterThanExp.hpp"
	"include/execution_context.hpp"
	"include/KleeneStarExp.hpp"
	"include/IffExp.hpp"
	"include/AllocationExp.hpp"
	"include/Assertion.hpp"
	"include/FunctionModel.hpp"
	"include/FloorExp.hpp"
	"include/UnaryOpExp.hpp")

add_executable(plc ${HEADERS} ${SOURCES})
source_group("src" FILES ${SOURCES})
source_group("include" FILES ${HEADERS})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
add_precompiled_header(plc "include/stdafx.hpp" FORCEINCLUDE SOURCE_CXX "src/stdafx.cpp")
target_link_libraries(plc parlex utilities LLVMCore LLVMSupport)
if(${MSVC})
	target_link_libraries(plc "${PLC_SYMENGINE_BINARY_DIR}/symengine/Debug/symengine.lib")
else()
	target_link_libraries(plc "${PLC_SYMENGINE_BINARY_DIR}/symengine/libsymengine.a")
endif()
add_dependencies(plc symengine_build)
set_property(TARGET plc PROPERTY CXX_STANDARD 11)
set_property(TARGET plc PROPERTY CXX_STANDARD_REQUIRED ON)

