# LLVM will build LLD if put it in the right place
file(COPY "${CMAKE_CURRENT_SOURCE_DIR}/lld" DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/llvm/tools/")

function(add_llvm)
	set(LLVM_BUILD_TESTS OFF CACHE BOOL "")
	set(LLVM_BUILD_UTILS OFF CACHE BOOL "")
	set(LLVM_ENABLE_OCAMLDOC OFF CACHE BOOL "")
	set(LLVM_ENABLE_RTTI ON CACHE BOOL "")
	set(LLVM_ENABLE_EH ON CACHE BOOL "")
	set(LLVM_INCLUDE_DOCS OFF CACHE BOOL "")
	set(LLVM_INCLUDE_EXAMPLES OFF CACHE BOOL "")
	set(LLVM_INCLUDE_GO_TESTS OFF CACHE BOOL "")
	set(LLVM_INCLUDE_TESTS OFF CACHE BOOL "")
	set(LLVM_INCLUDE_UTILS OFF CACHE BOOL "")
	set(LLVM_TARGETS_TO_BUILD "X86" CACHE STRING "") # Disable this setting to build for all targets

	add_subdirectory(llvm)
	include_directories(${LLVM_SOURCE_DIR}/include)
	export(TARGETS gtest APPEND FILE "${CMAKE_BINARY_DIR}/source/plc/llvm/lib/cmake/llvm/LLVMBuildTreeOnlyTargets.cmake")

	mark_as_advanced(
		FORCE
		BUG_REPORT_URL
		FFI_INCLUDE_DIR
		FFI_LIBRARY_DIR
		GOLD_EXECUTABLE
		LLD_BUILD_TOOLS
		LLD_USE_VTUNE
		LLVM_ABI_BREAKING_CHECKS
		LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION
		LLVM_APPEND_VC_REV
		LLVM_BINUTILS_INCDIR
		LLVM_BUILD_DOCS
		LLVM_BUILD_EXAMPLES
		LLVM_BUILD_EXTERNAL_COMPILER_RT
		LLVM_BUILD_LLVM_C_DYLIB
		LLVM_BUILD_LLVM_DYLIB
		LLVM_BUILD_RUNTIME
		LLVM_BUILD_RUNTIMES
		LLVM_BUILD_TESTS
		LLVM_BUILD_TOOLS
		LLVM_BUILD_UTILS
		LLVM_CCACHE_BUILD
		LLVM_COMPILER_JOBS
		LLVM_DEPENDENCY_DEBUGGING
		LLVM_DYLIB_COMPONENTS
		LLVM_DYLIB_SYMBOL_VERSIONING
		LLVM_ENABLE_ASSERTIONS
		LLVM_ENABLE_BACKTRACES
		LLVM_ENABLE_CRASH_OVERRIDES
		LLVM_ENABLE_CXX1Y
		LLVM_ENABLE_CXX1Z
		LLVM_ENABLE_DAGISEL_COV
		LLVM_ENABLE_DIA_SDK
		LLVM_ENABLE_DOXYGEN
		LLVM_ENABLE_DUMP
		LLVM_ENABLE_EH
		LLVM_ENABLE_EXPENSIVE_CHECKS
		LLVM_ENABLE_FFI
		LLVM_ENABLE_GISEL_COV
		LLVM_ENABLE_LIBCXX
		LLVM_ENABLE_LIBEDIT
		LLVM_ENABLE_LIBXML2
		LLVM_ENABLE_LLD
		LLVM_ENABLE_LOCAL_SUBMODULE_VISIBILITY
		LLVM_ENABLE_LTO
		LLVM_ENABLE_MODULES
		LLVM_ENABLE_MODULE_DEBUGGING
		LLVM_ENABLE_OCAMLDOC
		LLVM_ENABLE_PEDANTIC
		LLVM_ENABLE_PIC
		LLVM_ENABLE_PROJECTS
		LLVM_ENABLE_RTTI
		LLVM_ENABLE_RUNTIMES
		LLVM_ENABLE_SPHINX
		LLVM_ENABLE_TERMINFO
		LLVM_ENABLE_THREADS
		LLVM_ENABLE_WARNINGS
		LLVM_ENABLE_WERROR
		LLVM_ENABLE_ZLIB
		LLVM_EXPERIMENTAL_TARGETS_TO_BUILD
		LLVM_EXPORT_SYMBOLS_FOR_PLUGINS
		LLVM_EXTERNALIZE_DEBUGINFO
		LLVM_EXTERNAL_CLANG_SOURCE_DIR
		LLVM_EXTERNAL_COMPILER_RT_SOURCE_DIR
		LLVM_EXTERNAL_DRAGONEGG_SOURCE_DIR
		LLVM_EXTERNAL_LLDB_SOURCE_DIR
		LLVM_EXTERNAL_LLGO_SOURCE_DIR
		LLVM_EXTERNAL_OPENMP_SOURCE_DIR
		LLVM_EXTERNAL_PARALLEL_LIBS_SOURCE_DIR
		LLVM_FORCE_USE_OLD_HOST_TOOLCHAIN
		LLVM_INCLUDE_DOCS
		LLVM_INCLUDE_EXAMPLES
		LLVM_INCLUDE_GO_TESTS
		LLVM_INCLUDE_RUNTIMES
		LLVM_INCLUDE_TESTS
		LLVM_INCLUDE_TOOLS
		LLVM_INCLUDE_UTILS
		LLVM_INSTALL_BINUTILS_SYMLINKS
		LLVM_INSTALL_DOXYGEN_HTML_DIR
		LLVM_INSTALL_OCAMLDOC_HTML_DIR
		LLVM_INSTALL_TOOLCHAIN_ONLY
		LLVM_INSTALL_UTILS
		LLVM_LIBDIR_SUFFIX
		LLVM_LIB_FUZZING_ENGINE
		LLVM_LINK_LLVM_DYLIB
		LLVM_LIT_ARGS
		LLVM_LIT_TOOLS_DIR
		LLVM_OPTIMIZED_TABLEGEN
		LLVM_PARALLEL_COMPILE_JOBS
		LLVM_PARALLEL_LINK_JOBS
		LLVM_POLLY_BUILD
		LLVM_POLLY_LINK_INTO_TOOLS
		LLVM_PROFDATA_FILE
		LLVM_SRPM_USER_BINARY_SPECFILE
		LLVM_TABLEGEN
		LLVM_TOOL_CLANG_BUILD
		LLVM_TOOL_COMPILER_RT_BUILD
		LLVM_TOOL_DRAGONEGG_BUILD
		LLVM_TOOL_LLDB_BUILD
		LLVM_TOOL_LLGO_BUILD
		LLVM_TOOL_OPENMP_BUILD
		LLVM_TOOL_PARALLEL_LIBS_BUILD
		LLVM_USE_CRT_DEBUG
		LLVM_USE_CRT_MINSIZEREL
		LLVM_USE_CRT_RELEASE
		LLVM_USE_CRT_RELWITHDEBINFO
		LLVM_USE_FOLDERS
		LLVM_USE_INTEL_JITEVENTS
		LLVM_USE_OPROFILE
		LLVM_USE_SANITIZER
		LLVM_USE_SPLIT_DWARF
		LLVM_UTILS_INSTALL_DIR
		LLVM_VERSION_PRINTER_SHOW_HOST_TARGET_INFO
	)
endfunction(add_llvm)
add_llvm()

include_directories("${CMAKE_CURRENT_SOURCE_DIR}") #for tclap
include_directories("${PROJECT_SOURCE_DIR}/source/utilities")
include_directories("${PROJECT_SOURCE_DIR}/source/mpl")
include_directories("${PROJECT_SOURCE_DIR}/source/collections")
include_directories("${PROJECT_SOURCE_DIR}/source/parlex/include")
include_directories("${CMAKE_BINARY_DIR}/source/plc/llvm/include")

set(SOURCES
	"src/analytic_value.cpp"
	"src/compiler.cpp"
	"src/errors.cpp"
	"src/module.cpp"
	"src/natural_value.cpp"
	"src/plange_grammar.cpp"
	"src/plc_main.cpp"
	"src/plc_utils.cpp"
	"src/scope.cpp"
	"src/source_code.cpp"
	"src/symbol.cpp"
	"src/warnings.cpp"
)

set(HEADERS
	"include/analytic_value.hpp"
	"include/compiler.hpp"
	"include/errors.hpp"
	"include/module.hpp"
	"include/natural_value.hpp"
	"include/plange_grammar.hpp"
	"include/plc_utils.hpp"
	"include/relation.hpp"
	"include/scope.hpp"
	"include/source_code.hpp"
	"include/symbol.hpp"
	"include/warnings.hpp"
)

FILE(GLOB DOCUMENT_SOURCES "src/document/*.cpp*") 
FILE(GLOB DOCUMENT_HEADERS "include/document/*.hpp*")

set (TEST_SOURCES
	"plc_test/compiler.t.cpp"
)

add_executable(plc ${HEADERS} ${SOURCES} ${DOCUMENT_HEADERS} ${DOCUMENT_SOURCES} ${TEST_SOURCES})
source_group("src" FILES ${SOURCES})
source_group("include" FILES ${HEADERS})
source_group("src/document" FILES ${DOCUMENT_SOURCES})
source_group("include/document" FILES ${DOCUMENT_HEADERS})
source_group("test" FILES ${TEST_SOURCES})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/document)
set_property(TARGET plc PROPERTY CXX_STANDARD 17)
set_property(TARGET plc PROPERTY CXX_STANDARD_REQUIRED ON)
if(CMAKE_SYSTEM_NAME MATCHES "Windows")
	add_definitions(-D_SCL_SECURE_NO_WARNINGS)
else()
	target_link_libraries(plc stdc++fs)	
endif()
#add_precompiled_header(plc "include/stdafx.hpp" FORCEINCLUDE SOURCE_CXX "src/stdafx.cpp")
target_link_libraries(
	plc
	parlex
	utilities
	LLVMAnalysis
	LLVMAsmParser
	LLVMAsmPrinter
	LLVMBinaryFormat
	LLVMBitReader
	LLVMBitWriter
	LLVMCodeGen
	LLVMCore
	LLVMCoroutines
	LLVMCoverage
	LLVMDebugInfoCodeView
	LLVMDebugInfoDWARF
	LLVMDebugInfoMSF
	LLVMDebugInfoPDB
	LLVMDemangle
	LLVMDlltoolDriver
	LLVMExecutionEngine
	LLVMFuzzMutate
	LLVMGlobalISel
	LLVMInstCombine
	LLVMInstrumentation
	LLVMInterpreter
	LLVMipo
	LLVMIRReader
	LLVMLibDriver
	LLVMLineEditor
	LLVMLinker
	LLVMLTO
	LLVMMC
	LLVMMCDisassembler
	LLVMMCJIT
	LLVMMCParser
	LLVMMIRParser
	LLVMObjCARCOpts
	LLVMObject
	LLVMObjectYAML
	LLVMOption
	LLVMOrcJIT
	LLVMPasses
	LLVMProfileData
	LLVMRuntimeDyld
	LLVMScalarOpts
	LLVMSelectionDAG
	LLVMSupport
	LLVMSymbolize
	LLVMTableGen
	LLVMTarget
	LLVMTransformUtils
	LLVMVectorize
	LLVMWindowsManifest
	LLVMX86AsmParser
	LLVMX86AsmPrinter
	LLVMX86CodeGen
	LLVMX86Desc
	LLVMX86Disassembler
	LLVMX86Info
	LLVMX86Utils
	LLVMXRay
	lldCommon
	lldCore	
	gtest
	gtest_main
)

add_test(NAME plc_test COMMAND "$<TARGET_FILE:plc>" --test)

# # copy plc to artifacts folder
# add_custom_command(
# 	TARGET plc
# 	POST_BUILD
# 	COMMAND ${CMAKE_COMMAND} -E copy "$<TARGET_FILE:plc>" "${ARTIFACTS_PREFIX}/bin/$<TARGET_FILE_NAME:plc>"
# )


