/************ This file was generated by parlex ************/

#include "plange_grammar.hpp"
#include "one_shot.hpp"

parlex::grammar const & get_plange() {
	static parlex::grammar g("STATEMENT_SCOPE");

	static parlex::builtins::string_terminal & literal0 = g.add_literal(U"\n");
	static parlex::builtins::string_terminal & literal1 = g.add_literal(U"\n\"\"\"");
	static parlex::builtins::string_terminal & literal2 = g.add_literal(U" PTR");
	static parlex::builtins::string_terminal & literal3 = g.add_literal(U"!");
	static parlex::builtins::string_terminal & literal4 = g.add_literal(U"\"");
	static parlex::builtins::string_terminal & literal5 = g.add_literal(U"\"\"\"");
	static parlex::builtins::string_terminal & literal6 = g.add_literal(U"\"\"\"\n");
	static parlex::builtins::string_terminal & literal7 = g.add_literal(U"#");
	static parlex::builtins::string_terminal & literal8 = g.add_literal(U"%");
	static parlex::builtins::string_terminal & literal9 = g.add_literal(U"&");
	static parlex::builtins::string_terminal & literal10 = g.add_literal(U"&&");
	static parlex::builtins::string_terminal & literal11 = g.add_literal(U"\'|");
	static parlex::builtins::string_terminal & literal12 = g.add_literal(U"(");
	static parlex::builtins::string_terminal & literal13 = g.add_literal(U"(|");
	static parlex::builtins::string_terminal & literal14 = g.add_literal(U")");
	static parlex::builtins::string_terminal & literal15 = g.add_literal(U"*");
	static parlex::builtins::string_terminal & literal16 = g.add_literal(U"***/");
	static parlex::builtins::string_terminal & literal17 = g.add_literal(U"*/");
	static parlex::builtins::string_terminal & literal18 = g.add_literal(U"+");
	static parlex::builtins::string_terminal & literal19 = g.add_literal(U"++");
	static parlex::builtins::string_terminal & literal20 = g.add_literal(U"+-");
	static parlex::builtins::string_terminal & literal21 = g.add_literal(U",");
	static parlex::builtins::string_terminal & literal22 = g.add_literal(U", ");
	static parlex::builtins::string_terminal & literal23 = g.add_literal(U"-");
	static parlex::builtins::string_terminal & literal24 = g.add_literal(U"--");
	static parlex::builtins::string_terminal & literal25 = g.add_literal(U"->");
	static parlex::builtins::string_terminal & literal26 = g.add_literal(U".");
	static parlex::builtins::string_terminal & literal27 = g.add_literal(U"...");
	static parlex::builtins::string_terminal & literal28 = g.add_literal(U"/");
	static parlex::builtins::string_terminal & literal29 = g.add_literal(U"/*");
	static parlex::builtins::string_terminal & literal30 = g.add_literal(U"/***");
	static parlex::builtins::string_terminal & literal31 = g.add_literal(U"//");
	static parlex::builtins::string_terminal & literal32 = g.add_literal(U"/=");
	static parlex::builtins::string_terminal & literal33 = g.add_literal(U"/has");
	static parlex::builtins::string_terminal & literal34 = g.add_literal(U"/in");
	static parlex::builtins::string_terminal & literal35 = g.add_literal(U"0");
	static parlex::builtins::string_terminal & literal36 = g.add_literal(U"0x");
	static parlex::builtins::string_terminal & literal37 = g.add_literal(U"1");
	static parlex::builtins::string_terminal & literal38 = g.add_literal(U"2");
	static parlex::builtins::string_terminal & literal39 = g.add_literal(U"3");
	static parlex::builtins::string_terminal & literal40 = g.add_literal(U"4");
	static parlex::builtins::string_terminal & literal41 = g.add_literal(U"5");
	static parlex::builtins::string_terminal & literal42 = g.add_literal(U"6");
	static parlex::builtins::string_terminal & literal43 = g.add_literal(U"7");
	static parlex::builtins::string_terminal & literal44 = g.add_literal(U"8");
	static parlex::builtins::string_terminal & literal45 = g.add_literal(U"9");
	static parlex::builtins::string_terminal & literal46 = g.add_literal(U":");
	static parlex::builtins::string_terminal & literal47 = g.add_literal(U":=");
	static parlex::builtins::string_terminal & literal48 = g.add_literal(U";");
	static parlex::builtins::string_terminal & literal49 = g.add_literal(U"<");
	static parlex::builtins::string_terminal & literal50 = g.add_literal(U"<-");
	static parlex::builtins::string_terminal & literal51 = g.add_literal(U"<->");
	static parlex::builtins::string_terminal & literal52 = g.add_literal(U"<<");
	static parlex::builtins::string_terminal & literal53 = g.add_literal(U"<=>");
	static parlex::builtins::string_terminal & literal54 = g.add_literal(U"=");
	static parlex::builtins::string_terminal & literal55 = g.add_literal(U"=<");
	static parlex::builtins::string_terminal & literal56 = g.add_literal(U"=>");
	static parlex::builtins::string_terminal & literal57 = g.add_literal(U">");
	static parlex::builtins::string_terminal & literal58 = g.add_literal(U">>");
	static parlex::builtins::string_terminal & literal59 = g.add_literal(U"\?");
	static parlex::builtins::string_terminal & literal60 = g.add_literal(U"\?\?");
	static parlex::builtins::string_terminal & literal61 = g.add_literal(U"@");
	static parlex::builtins::string_terminal & literal62 = g.add_literal(U"BYTE");
	static parlex::builtins::string_terminal & literal63 = g.add_literal(U"DWORD");
	static parlex::builtins::string_terminal & literal64 = g.add_literal(U"QWORD");
	static parlex::builtins::string_terminal & literal65 = g.add_literal(U"WORD");
	static parlex::builtins::string_terminal & literal66 = g.add_literal(U"[");
	static parlex::builtins::string_terminal & literal67 = g.add_literal(U"[|");
	static parlex::builtins::string_terminal & literal68 = g.add_literal(U"\\");
	static parlex::builtins::string_terminal & literal69 = g.add_literal(U"]");
	static parlex::builtins::string_terminal & literal70 = g.add_literal(U"^");
	static parlex::builtins::string_terminal & literal71 = g.add_literal(U"^^");
	static parlex::builtins::string_terminal & literal72 = g.add_literal(U"_");
	static parlex::builtins::string_terminal & literal73 = g.add_literal(U"_delta_");
	static parlex::builtins::string_terminal & literal74 = g.add_literal(U"_dot_");
	static parlex::builtins::string_terminal & literal75 = g.add_literal(U"_o_");
	static parlex::builtins::string_terminal & literal76 = g.add_literal(U"_x_");
	static parlex::builtins::string_terminal & literal77 = g.add_literal(U"_|");
	static parlex::builtins::string_terminal & literal78 = g.add_literal(U"`");
	static parlex::builtins::string_terminal & literal79 = g.add_literal(U"```");
	static parlex::builtins::string_terminal & literal80 = g.add_literal(U"alloc");
	static parlex::builtins::string_terminal & literal81 = g.add_literal(U"and");
	static parlex::builtins::string_terminal & literal82 = g.add_literal(U"asm");
	static parlex::builtins::string_terminal & literal83 = g.add_literal(U"atomic");
	static parlex::builtins::string_terminal & literal84 = g.add_literal(U"break");
	static parlex::builtins::string_terminal & literal85 = g.add_literal(U"casts");
	static parlex::builtins::string_terminal & literal86 = g.add_literal(U"catch");
	static parlex::builtins::string_terminal & literal87 = g.add_literal(U"continue");
	static parlex::builtins::string_terminal & literal88 = g.add_literal(U"do");
	static parlex::builtins::string_terminal & literal89 = g.add_literal(U"elif");
	static parlex::builtins::string_terminal & literal90 = g.add_literal(U"else");
	static parlex::builtins::string_terminal & literal91 = g.add_literal(U"extern");
	static parlex::builtins::string_terminal & literal92 = g.add_literal(U"false");
	static parlex::builtins::string_terminal & literal93 = g.add_literal(U"finally");
	static parlex::builtins::string_terminal & literal94 = g.add_literal(U"for");
	static parlex::builtins::string_terminal & literal95 = g.add_literal(U"free");
	static parlex::builtins::string_terminal & literal96 = g.add_literal(U"get");
	static parlex::builtins::string_terminal & literal97 = g.add_literal(U"has");
	static parlex::builtins::string_terminal & literal98 = g.add_literal(U"if");
	static parlex::builtins::string_terminal & literal99 = g.add_literal(U"imperative");
	static parlex::builtins::string_terminal & literal100 = g.add_literal(U"implementing");
	static parlex::builtins::string_terminal & literal101 = g.add_literal(U"import");
	static parlex::builtins::string_terminal & literal102 = g.add_literal(U"in");
	static parlex::builtins::string_terminal & literal103 = g.add_literal(U"inheriting");
	static parlex::builtins::string_terminal & literal104 = g.add_literal(U"internal");
	static parlex::builtins::string_terminal & literal105 = g.add_literal(U"is");
	static parlex::builtins::string_terminal & literal106 = g.add_literal(U"no_throw");
	static parlex::builtins::string_terminal & literal107 = g.add_literal(U"null");
	static parlex::builtins::string_terminal & literal108 = g.add_literal(U"opaque");
	static parlex::builtins::string_terminal & literal109 = g.add_literal(U"or");
	static parlex::builtins::string_terminal & literal110 = g.add_literal(U"private");
	static parlex::builtins::string_terminal & literal111 = g.add_literal(U"protected");
	static parlex::builtins::string_terminal & literal112 = g.add_literal(U"protected internal");
	static parlex::builtins::string_terminal & literal113 = g.add_literal(U"psubs");
	static parlex::builtins::string_terminal & literal114 = g.add_literal(U"psups");
	static parlex::builtins::string_terminal & literal115 = g.add_literal(U"public");
	static parlex::builtins::string_terminal & literal116 = g.add_literal(U"pure");
	static parlex::builtins::string_terminal & literal117 = g.add_literal(U"return");
	static parlex::builtins::string_terminal & literal118 = g.add_literal(U"set");
	static parlex::builtins::string_terminal & literal119 = g.add_literal(U"stable");
	static parlex::builtins::string_terminal & literal120 = g.add_literal(U"static");
	static parlex::builtins::string_terminal & literal121 = g.add_literal(U"subs");
	static parlex::builtins::string_terminal & literal122 = g.add_literal(U"sups");
	static parlex::builtins::string_terminal & literal123 = g.add_literal(U"this");
	static parlex::builtins::string_terminal & literal124 = g.add_literal(U"this_type");
	static parlex::builtins::string_terminal & literal125 = g.add_literal(U"throw");
	static parlex::builtins::string_terminal & literal126 = g.add_literal(U"true");
	static parlex::builtins::string_terminal & literal127 = g.add_literal(U"try");
	static parlex::builtins::string_terminal & literal128 = g.add_literal(U"type");
	static parlex::builtins::string_terminal & literal129 = g.add_literal(U"unstable");
	static parlex::builtins::string_terminal & literal130 = g.add_literal(U"until");
	static parlex::builtins::string_terminal & literal131 = g.add_literal(U"volatile");
	static parlex::builtins::string_terminal & literal132 = g.add_literal(U"while");
	static parlex::builtins::string_terminal & literal133 = g.add_literal(U"xor");
	static parlex::builtins::string_terminal & literal134 = g.add_literal(U"{");
	static parlex::builtins::string_terminal & literal135 = g.add_literal(U"{|");
	static parlex::builtins::string_terminal & literal136 = g.add_literal(U"|");
	static parlex::builtins::string_terminal & literal137 = g.add_literal(U"|\'");
	static parlex::builtins::string_terminal & literal138 = g.add_literal(U"|)");
	static parlex::builtins::string_terminal & literal139 = g.add_literal(U"|]");
	static parlex::builtins::string_terminal & literal140 = g.add_literal(U"|_");
	static parlex::builtins::string_terminal & literal141 = g.add_literal(U"||");
	static parlex::builtins::string_terminal & literal142 = g.add_literal(U"|}");
	static parlex::builtins::string_terminal & literal143 = g.add_literal(U"}");
	static parlex::builtins::string_terminal & literal144 = g.add_literal(U"~");
	static parlex::builtins::string_terminal & literal145 = g.add_literal(U"~~");
	static parlex::builtins::string_terminal & literal146 = g.add_literal(U"¬");
	static parlex::builtins::string_terminal & literal147 = g.add_literal(U"±");
	static parlex::builtins::string_terminal & literal148 = g.add_literal(U"×");
	static parlex::builtins::string_terminal & literal149 = g.add_literal(U"÷");
	static parlex::builtins::string_terminal & literal150 = g.add_literal(U"Δ");
	static parlex::builtins::string_terminal & literal151 = g.add_literal(U"ᶜ");
	static parlex::builtins::string_terminal & literal152 = g.add_literal(U"←");
	static parlex::builtins::string_terminal & literal153 = g.add_literal(U"↑");
	static parlex::builtins::string_terminal & literal154 = g.add_literal(U"→");
	static parlex::builtins::string_terminal & literal155 = g.add_literal(U"↓");
	static parlex::builtins::string_terminal & literal156 = g.add_literal(U"↔");
	static parlex::builtins::string_terminal & literal157 = g.add_literal(U"⇒");
	static parlex::builtins::string_terminal & literal158 = g.add_literal(U"⇔");
	static parlex::builtins::string_terminal & literal159 = g.add_literal(U"∀");
	static parlex::builtins::string_terminal & literal160 = g.add_literal(U"∃");
	static parlex::builtins::string_terminal & literal161 = g.add_literal(U"∃!");
	static parlex::builtins::string_terminal & literal162 = g.add_literal(U"∈");
	static parlex::builtins::string_terminal & literal163 = g.add_literal(U"∉");
	static parlex::builtins::string_terminal & literal164 = g.add_literal(U"∋");
	static parlex::builtins::string_terminal & literal165 = g.add_literal(U"∌");
	static parlex::builtins::string_terminal & literal166 = g.add_literal(U"∘");
	static parlex::builtins::string_terminal & literal167 = g.add_literal(U"√");
	static parlex::builtins::string_terminal & literal168 = g.add_literal(U"∧");
	static parlex::builtins::string_terminal & literal169 = g.add_literal(U"∨");
	static parlex::builtins::string_terminal & literal170 = g.add_literal(U"∩");
	static parlex::builtins::string_terminal & literal171 = g.add_literal(U"∪");
	static parlex::builtins::string_terminal & literal172 = g.add_literal(U"≠");
	static parlex::builtins::string_terminal & literal173 = g.add_literal(U"≤");
	static parlex::builtins::string_terminal & literal174 = g.add_literal(U"≥");
	static parlex::builtins::string_terminal & literal175 = g.add_literal(U"⊂");
	static parlex::builtins::string_terminal & literal176 = g.add_literal(U"⊃");
	static parlex::builtins::string_terminal & literal177 = g.add_literal(U"⊆");
	static parlex::builtins::string_terminal & literal178 = g.add_literal(U"⊇");
	static parlex::builtins::string_terminal & literal179 = g.add_literal(U"⊕");
	static parlex::builtins::string_terminal & literal180 = g.add_literal(U"⊖");
	static parlex::builtins::string_terminal & literal181 = g.add_literal(U"⋅");
	static parlex::builtins::string_terminal & literal182 = g.add_literal(U"⌈");
	static parlex::builtins::string_terminal & literal183 = g.add_literal(U"⌉");
	static parlex::builtins::string_terminal & literal184 = g.add_literal(U"⌊");
	static parlex::builtins::string_terminal & literal185 = g.add_literal(U"⌋");

	static parlex::state_machine & ADDITION = g.add_production("ADDITION", 0, 1, parlex::associativity::any);
	static parlex::state_machine & ADD_SUB = g.add_production("ADD_SUB", 0, 1, parlex::associativity::left);
	static parlex::state_machine & ALL = g.add_production("ALL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ALLOCATION = g.add_production("ALLOCATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & AND = g.add_production("AND", 0, 1, parlex::associativity::any);
	static parlex::state_machine & ARRAY = g.add_production("ARRAY", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ARRAY_INVOCATION = g.add_production("ARRAY_INVOCATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_EXPRESSION = g.add_production("ASM_EXPRESSION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_FUNCTION = g.add_production("ASM_FUNCTION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_IDENTIFIER = g.add_production("ASM_IDENTIFIER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_OP = g.add_production("ASM_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_PTR_ARITHMETIC_ATT = g.add_production("ASM_PTR_ARITHMETIC_ATT", 0, 2, parlex::associativity::none);
	static parlex::state_machine & ASM_PTR_ARITHMETIC_ATT_REG = g.add_production("ASM_PTR_ARITHMETIC_ATT_REG", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_PTR_ARITHMETIC_INTEL = g.add_production("ASM_PTR_ARITHMETIC_INTEL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_SCOPE = g.add_production("ASM_SCOPE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASM_STATEMENT = g.add_production("ASM_STATEMENT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ASSIGNMENT = g.add_production("ASSIGNMENT", 0, 1, parlex::associativity::right);
	static parlex::state_machine & BIJECTION = g.add_production("BIJECTION", 0, 1, parlex::associativity::any);
	static parlex::state_machine & BINARY_ARITHMETIC_OP = g.add_production("BINARY_ARITHMETIC_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & BINARY_COLLECTION_OP = g.add_production("BINARY_COLLECTION_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & BINARY_LOGICAL_OP = g.add_production("BINARY_LOGICAL_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & BINARY_OP = g.add_production("BINARY_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & BITWISE_OP = g.add_production("BITWISE_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & BIT_AND = g.add_production("BIT_AND", 0, 1, parlex::associativity::any);
	static parlex::state_machine & BIT_NOT = g.add_production("BIT_NOT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & BIT_OR = g.add_production("BIT_OR", 0, 1, parlex::associativity::any);
	static parlex::state_machine & BIT_XOR = g.add_production("BIT_XOR", 0, 1, parlex::associativity::any);
	static parlex::state_machine & BOOL = g.add_production("BOOL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & CARDINALITY = g.add_production("CARDINALITY", 0, 1, parlex::associativity::none);
	static parlex::state_machine & CAST = g.add_production("CAST", 0, 1, parlex::associativity::none);
	static parlex::state_machine & CASTS = g.add_production("CASTS", 0, 1, parlex::associativity::none);
	static parlex::state_machine & CEILING = g.add_production("CEILING", 0, 1, parlex::associativity::none);
	static parlex::state_machine & COMMENT = g.add_production("COMMENT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & COMPLEMENT = g.add_production("COMPLEMENT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & COMPOSITION = g.add_production("COMPOSITION", 0, 1, parlex::associativity::any);
	static parlex::state_machine & COMPOUND = g.add_production("COMPOUND", 0, 1, parlex::associativity::left);
	static parlex::state_machine & CONDITIONAL = g.add_production("CONDITIONAL", 0, 1, parlex::associativity::right);
	static parlex::state_machine & CONSTRUCTIVE_OP = g.add_production("CONSTRUCTIVE_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & CROSS_PRODUCT = g.add_production("CROSS_PRODUCT", 0, 1, parlex::associativity::left);
	static parlex::state_machine & DECLARATION = g.add_production("DECLARATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DECLARATION_PART = g.add_production("DECLARATION_PART", 0, 2, parlex::associativity::none);
	static parlex::state_machine & DEFINITION = g.add_production("DEFINITION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DEFINITION_PART = g.add_production("DEFINITION_PART", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DELTA = g.add_production("DELTA", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DIMENSION = g.add_production("DIMENSION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DIMENSIONAL_ANALYSIS_OP = g.add_production("DIMENSIONAL_ANALYSIS_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DIMENSIONAL_NUMBER = g.add_production("DIMENSIONAL_NUMBER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & DIVISION = g.add_production("DIVISION", 0, 1, parlex::associativity::left);
	static parlex::state_machine & DO = g.add_production("DO", 0, 2, parlex::associativity::none);
	static parlex::state_machine & DOT_PRODUCT = g.add_production("DOT_PRODUCT", 0, 1, parlex::associativity::left);
	static parlex::state_machine & EMBEDDED_COMMENT = g.add_production("EMBEDDED_COMMENT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & EMBEDDED_COMMENT_INTERIOR = g.add_production("EMBEDDED_COMMENT_INTERIOR", 0, 1, parlex::associativity::none);
	static parlex::state_machine & EMBEDDED_STRING = g.add_production("EMBEDDED_STRING", 0, 1, parlex::associativity::none);
	static parlex::state_machine & END_OF_LINE_COMMENT = g.add_production("END_OF_LINE_COMMENT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & EQUALITY_CHAIN = g.add_production("EQUALITY_CHAIN", 0, 1, parlex::associativity::none);
	static parlex::state_machine & EXISTS = g.add_production("EXISTS", 0, 1, parlex::associativity::none);
	static parlex::state_machine & EXISTS_ONE = g.add_production("EXISTS_ONE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & EXPONENTIATION = g.add_production("EXPONENTIATION", 0, 1, parlex::associativity::right);
	static parlex::state_machine & EXPRESSION = g.add_production("EXPRESSION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FACTORIAL = g.add_production("FACTORIAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FLOOR = g.add_production("FLOOR", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FOR = g.add_production("FOR", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FOR_COLLECTION = g.add_production("FOR_COLLECTION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FREE = g.add_production("FREE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FUNCTION = g.add_production("FUNCTION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FUNCTION_MODIFIER = g.add_production("FUNCTION_MODIFIER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FUNCTION_MODIFIER_ATOMIC = g.add_production("FUNCTION_MODIFIER_ATOMIC", 0, 2, parlex::associativity::none);
	static parlex::state_machine & FUNCTION_MODIFIER_MODEL = g.add_production("FUNCTION_MODIFIER_MODEL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & FUNCTION_MODIFIER_NO_THROW = g.add_production("FUNCTION_MODIFIER_NO_THROW", 0, 2, parlex::associativity::none);
	static parlex::state_machine & FUNCTION_MODIFIER_PLATFORM = g.add_production("FUNCTION_MODIFIER_PLATFORM", 0, 2, parlex::associativity::none);
	static parlex::state_machine & FUNCTION_MODIFIER_STABILITY = g.add_production("FUNCTION_MODIFIER_STABILITY", 0, 2, parlex::associativity::none);
	static parlex::state_machine & GETTER = g.add_production("GETTER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & GREATER_CHAIN = g.add_production("GREATER_CHAIN", 0, 1, parlex::associativity::none);
	static parlex::state_machine & HAS = g.add_production("HAS", 0, 1, parlex::associativity::left);
	static parlex::state_machine & HEX = g.add_production("HEX", 0, 1, parlex::associativity::none);
	static parlex::state_machine & IC = g.add_production("IC", 0, 1, parlex::associativity::none);
	static parlex::state_machine & ICR = g.add_production("ICR", 0, 1, parlex::associativity::none);
	static parlex::state_machine & IDENTIFIER = g.add_production("IDENTIFIER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & IF = g.add_production("IF", 0, 2, parlex::associativity::none);
	static parlex::state_machine & IFF = g.add_production("IFF", 0, 1, parlex::associativity::any);
	static parlex::state_machine & IMPLICATION = g.add_production("IMPLICATION", 0, 1, parlex::associativity::right);
	static parlex::state_machine & IMPLICIT_TYPE_DEREFERENCE = g.add_production("IMPLICIT_TYPE_DEREFERENCE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & IMPORT = g.add_production("IMPORT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & IN = g.add_production("IN", 0, 1, parlex::associativity::left);
	static parlex::state_machine & INEQUALITY = g.add_production("INEQUALITY", 0, 1, parlex::associativity::left);
	static parlex::state_machine & INHERITANCE_LIST = g.add_production("INHERITANCE_LIST", 0, 1, parlex::associativity::none);
	static parlex::state_machine & INTEGER_DIVISION = g.add_production("INTEGER_DIVISION", 0, 1, parlex::associativity::left);
	static parlex::state_machine & INTERSECTION = g.add_production("INTERSECTION", 0, 1, parlex::associativity::any);
	static parlex::state_machine & INVOCATION = g.add_production("INVOCATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & IS = g.add_production("IS", 0, 1, parlex::associativity::none);
	static parlex::state_machine & KLEENE_STAR = g.add_production("KLEENE_STAR", 0, 1, parlex::associativity::none);
	static parlex::state_machine & LESSER_CHAIN = g.add_production("LESSER_CHAIN", 0, 1, parlex::associativity::none);
	static parlex::state_machine & LIST = g.add_production("LIST", 0, 1, parlex::associativity::none);
	static parlex::state_machine & LOOP = g.add_production("LOOP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & MAGNITUDE = g.add_production("MAGNITUDE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & MAP = g.add_production("MAP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & MAPS_TO = g.add_production("MAPS_TO", 0, 1, parlex::associativity::right);
	static parlex::state_machine & MEMBER_ACCESS = g.add_production("MEMBER_ACCESS", 0, 1, parlex::associativity::left);
	static parlex::state_machine & MODULATION = g.add_production("MODULATION", 0, 1, parlex::associativity::left);
	static parlex::state_machine & MULTIPLICATION = g.add_production("MULTIPLICATION", 0, 1, parlex::associativity::any);
	static parlex::state_machine & MULTIPLICATIVE_OP = g.add_production("MULTIPLICATIVE_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NAND = g.add_production("NAND", 0, 1, parlex::associativity::left);
	static parlex::state_machine & NEAREST_INTEGER = g.add_production("NEAREST_INTEGER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NEGATION = g.add_production("NEGATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NON_FRACTIONAL = g.add_production("NON_FRACTIONAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NON_NEG_FRACTIONAL = g.add_production("NON_NEG_FRACTIONAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NON_NEG_INTEGER = g.add_production("NON_NEG_INTEGER", 0, 2, parlex::associativity::none);
	static parlex::state_machine & NON_NEG_NON_FRACTIONAL = g.add_production("NON_NEG_NON_FRACTIONAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NON_NEG_NUMBER = g.add_production("NON_NEG_NUMBER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NON_ZERO_DECIMAL_DIGIT = g.add_production("NON_ZERO_DECIMAL_DIGIT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NOR = g.add_production("NOR", 0, 1, parlex::associativity::left);
	static parlex::state_machine & NOT = g.add_production("NOT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & NOT_HAS = g.add_production("NOT_HAS", 0, 1, parlex::associativity::left);
	static parlex::state_machine & NOT_IN = g.add_production("NOT_IN", 0, 1, parlex::associativity::left);
	static parlex::state_machine & NULL_COALESCE = g.add_production("NULL_COALESCE", 0, 1, parlex::associativity::left);
	static parlex::state_machine & OCTAL = g.add_production("OCTAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & OR = g.add_production("OR", 0, 1, parlex::associativity::any);
	static parlex::state_machine & PARAMETER = g.add_production("PARAMETER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PARAMETER_ALGEBRAIC = g.add_production("PARAMETER_ALGEBRAIC", 0, 2, parlex::associativity::none);
	static parlex::state_machine & PARAMETER_NORMAL = g.add_production("PARAMETER_NORMAL", 0, 2, parlex::associativity::none);
	static parlex::state_machine & PARENTHETICAL = g.add_production("PARENTHETICAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PARENTHETICAL_INVOCATION = g.add_production("PARENTHETICAL_INVOCATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PAYLOAD = g.add_production("PAYLOAD", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PLATFORM = g.add_production("PLATFORM", 0, 1, parlex::associativity::none);
	static parlex::state_machine & POST_DEC = g.add_production("POST_DEC", 0, 1, parlex::associativity::none);
	static parlex::state_machine & POST_INC = g.add_production("POST_INC", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PREPEND = g.add_production("PREPEND", 0, 1, parlex::associativity::right);
	static parlex::state_machine & PRE_DEC = g.add_production("PRE_DEC", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PRE_INC = g.add_production("PRE_INC", 0, 1, parlex::associativity::none);
	static parlex::state_machine & PROPERTY = g.add_production("PROPERTY", 0, 1, parlex::associativity::none);
	static parlex::state_machine & RADICAL = g.add_production("RADICAL", 0, 1, parlex::associativity::none);
	static parlex::state_machine & RANGE = g.add_production("RANGE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & RELATIONAL_COLLECTION_OP = g.add_production("RELATIONAL_COLLECTION_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & RELATIONAL_OP = g.add_production("RELATIONAL_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & RETURN = g.add_production("RETURN", 0, 2, parlex::associativity::none);
	static parlex::state_machine & SET = g.add_production("SET", 0, 1, parlex::associativity::none);
	static parlex::state_machine & SETTER = g.add_production("SETTER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & SET_COMPREHENSION = g.add_production("SET_COMPREHENSION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & SHIFTL = g.add_production("SHIFTL", 0, 1, parlex::associativity::left);
	static parlex::state_machine & SHIFTR = g.add_production("SHIFTR", 0, 1, parlex::associativity::left);
	static parlex::state_machine & SLICE = g.add_production("SLICE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & STATEMENT = g.add_production("STATEMENT", 0, 2, parlex::associativity::none);
	static parlex::state_machine & STATEMENT_SCOPE = g.add_production("STATEMENT_SCOPE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & SUBSET_CHAIN = g.add_production("SUBSET_CHAIN", 0, 1, parlex::associativity::none);
	static parlex::state_machine & SUBTRACTION = g.add_production("SUBTRACTION", 0, 1, parlex::associativity::left);
	static parlex::state_machine & SUPERSET_CHAIN = g.add_production("SUPERSET_CHAIN", 0, 1, parlex::associativity::none);
	static parlex::state_machine & SYMMETRIC_DIFFERENCE = g.add_production("SYMMETRIC_DIFFERENCE", 0, 1, parlex::associativity::left);
	static parlex::state_machine & THROW = g.add_production("THROW", 0, 2, parlex::associativity::none);
	static parlex::state_machine & TRY = g.add_production("TRY", 0, 3, parlex::associativity::none);
	static parlex::state_machine & TUPLE = g.add_production("TUPLE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE = g.add_production("TYPE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE_DEREFERENCE = g.add_production("TYPE_DEREFERENCE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE_INVOCATION = g.add_production("TYPE_INVOCATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE_SCOPE = g.add_production("TYPE_SCOPE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE_SCOPE_DECLARATION = g.add_production("TYPE_SCOPE_DECLARATION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE_SCOPE_DECLARATION_PART = g.add_production("TYPE_SCOPE_DECLARATION_PART", 0, 3, parlex::associativity::none);
	static parlex::state_machine & TYPE_SCOPE_DEFINITION = g.add_production("TYPE_SCOPE_DEFINITION", 0, 1, parlex::associativity::none);
	static parlex::state_machine & TYPE_STATEMENT = g.add_production("TYPE_STATEMENT", 0, 1, parlex::associativity::none);
	static parlex::state_machine & UNARY_ARITHMETIC_OP = g.add_production("UNARY_ARITHMETIC_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & UNARY_LOGICAL_OP = g.add_production("UNARY_LOGICAL_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & UNARY_OP = g.add_production("UNARY_OP", 0, 1, parlex::associativity::none);
	static parlex::state_machine & UNION = g.add_production("UNION", 0, 1, parlex::associativity::any);
	static parlex::state_machine & UNIT_DIVISION = g.add_production("UNIT_DIVISION", 0, 1, parlex::associativity::left);
	static parlex::state_machine & UNIT_EXPONENTIATION = g.add_production("UNIT_EXPONENTIATION", 0, 1, parlex::associativity::right);
	static parlex::state_machine & UNIT_MULTIPLICATION = g.add_production("UNIT_MULTIPLICATION", 0, 1, parlex::associativity::left);
	static parlex::state_machine & VECTOR_NORM = g.add_production("VECTOR_NORM", 0, 1, parlex::associativity::none);
	static parlex::state_machine & VISIBILITY_MODIFIER = g.add_production("VISIBILITY_MODIFIER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & VOLATILE_IMPLICIT_TYPE_DEREFERENCE = g.add_production("VOLATILE_IMPLICIT_TYPE_DEREFERENCE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & VOLATILE_TYPE_DEREFERENCE = g.add_production("VOLATILE_TYPE_DEREFERENCE", 0, 1, parlex::associativity::none);
	static parlex::state_machine & WHOLE_NUMBER = g.add_production("WHOLE_NUMBER", 0, 1, parlex::associativity::none);
	static parlex::state_machine & WS = g.add_production("WS", 0, 1, parlex::associativity::none);
	static parlex::state_machine & XML_DOC_STRING = g.add_production("XML_DOC_STRING", 0, 1, parlex::associativity::none);
	static parlex::state_machine & XOR = g.add_production("XOR", 0, 1, parlex::associativity::left);

	static one_shot oneShot;
	oneShot.go([&](){

		ADDITION.add_transition(0, EXPRESSION, 1);
		ADDITION.add_transition(1, IC, 1);
		ADDITION.add_transition(1, literal18, 2);
		ADDITION.add_transition(2, EXPRESSION, 3);
		ADDITION.add_transition(2, IC, 2);

		ADD_SUB.add_transition(0, EXPRESSION, 1);
		ADD_SUB.add_transition(1, IC, 1);
		ADD_SUB.add_transition(1, literal147, 2);
		ADD_SUB.add_transition(1, literal20, 2);
		ADD_SUB.add_transition(2, EXPRESSION, 3);
		ADD_SUB.add_transition(2, IC, 2);

		ALL.add_transition(0, literal159, 1);
		ALL.add_transition(1, EXPRESSION, 2);
		ALL.add_transition(1, IC, 1);

		ALLOCATION.add_transition(0, literal80, 1);
		ALLOCATION.add_transition(1, IC, 1);
		ALLOCATION.add_transition(1, PARENTHETICAL_INVOCATION, 2);

		AND.add_transition(0, EXPRESSION, 1);
		AND.add_transition(1, IC, 1);
		AND.add_transition(1, literal168, 2);
		AND.add_transition(1, literal81, 2);
		AND.add_transition(2, EXPRESSION, 3);
		AND.add_transition(2, IC, 2);

		ARRAY.add_transition(0, literal66, 1);
		ARRAY.add_transition(1, EXPRESSION, 2);
		ARRAY.add_transition(1, IC, 1);
		ARRAY.add_transition(1, literal69, 4);
		ARRAY.add_transition(2, IC, 2);
		ARRAY.add_transition(2, literal21, 3);
		ARRAY.add_transition(2, literal69, 4);
		ARRAY.add_transition(3, EXPRESSION, 2);
		ARRAY.add_transition(3, IC, 3);

		ARRAY_INVOCATION.add_transition(0, EXPRESSION, 1);
		ARRAY_INVOCATION.add_transition(1, literal66, 2);
		ARRAY_INVOCATION.add_transition(2, EXPRESSION, 3);
		ARRAY_INVOCATION.add_transition(2, IC, 2);
		ARRAY_INVOCATION.add_transition(2, SLICE, 3);
		ARRAY_INVOCATION.add_transition(2, literal21, 2);
		ARRAY_INVOCATION.add_transition(2, literal69, 4);
		ARRAY_INVOCATION.add_transition(3, IC, 3);
		ARRAY_INVOCATION.add_transition(3, literal21, 2);
		ARRAY_INVOCATION.add_transition(3, literal69, 4);

		ASM_EXPRESSION.add_transition(0, ASM_IDENTIFIER, 1);
		ASM_EXPRESSION.add_transition(0, ASM_PTR_ARITHMETIC_ATT, 1);
		ASM_EXPRESSION.add_transition(0, ASM_PTR_ARITHMETIC_INTEL, 1);
		ASM_EXPRESSION.add_transition(0, NON_FRACTIONAL, 1);

		ASM_FUNCTION.add_transition(0, FUNCTION_MODIFIER, 1);
		ASM_FUNCTION.add_transition(0, literal12, 2);
		ASM_FUNCTION.add_transition(0, literal82, 3);
		ASM_FUNCTION.add_transition(1, literal82, 3);
		ASM_FUNCTION.add_transition(2, IC, 2);
		ASM_FUNCTION.add_transition(2, PARAMETER, 4);
		ASM_FUNCTION.add_transition(2, literal14, 5);
		ASM_FUNCTION.add_transition(3, IC, 3);
		ASM_FUNCTION.add_transition(3, literal134, 6);
		ASM_FUNCTION.add_transition(4, IC, 4);
		ASM_FUNCTION.add_transition(4, literal14, 5);
		ASM_FUNCTION.add_transition(4, literal21, 7);
		ASM_FUNCTION.add_transition(5, FUNCTION_MODIFIER, 1);
		ASM_FUNCTION.add_transition(5, IC, 5);
		ASM_FUNCTION.add_transition(5, literal82, 3);
		ASM_FUNCTION.add_transition(6, ASM_SCOPE, 8);
		ASM_FUNCTION.add_transition(7, IC, 7);
		ASM_FUNCTION.add_transition(7, PARAMETER, 4);
		ASM_FUNCTION.add_transition(8, literal143, 9);

		ASM_IDENTIFIER.add_transition(0, IDENTIFIER, 2);
		ASM_IDENTIFIER.add_transition(0, literal8, 1);
		ASM_IDENTIFIER.add_transition(1, IDENTIFIER, 2);

		ASM_OP.add_transition(0, parlex::builtins::lowercase_letter, 1);
		ASM_OP.add_transition(1, parlex::builtins::lowercase_letter, 1);

		ASM_PTR_ARITHMETIC_ATT.add_transition(0, ASM_IDENTIFIER, 1);
		ASM_PTR_ARITHMETIC_ATT.add_transition(0, NON_FRACTIONAL, 2);
		ASM_PTR_ARITHMETIC_ATT.add_transition(1, literal46, 3);
		ASM_PTR_ARITHMETIC_ATT.add_transition(2, ASM_PTR_ARITHMETIC_ATT_REG, 4);
		ASM_PTR_ARITHMETIC_ATT.add_transition(3, NON_FRACTIONAL, 5);
		ASM_PTR_ARITHMETIC_ATT.add_transition(5, ASM_PTR_ARITHMETIC_ATT_REG, 4);

		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(0, literal12, 1);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(1, ASM_IDENTIFIER, 2);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(1, literal14, 7);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(1, literal21, 3);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(2, literal14, 7);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(2, literal21, 3);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(3, ASM_IDENTIFIER, 4);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(4, literal14, 7);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(4, literal21, 5);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(5, NON_NEG_NON_FRACTIONAL, 6);
		ASM_PTR_ARITHMETIC_ATT_REG.add_transition(6, literal14, 7);

		ASM_PTR_ARITHMETIC_INTEL.add_transition(0, literal62, 2);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(0, literal63, 2);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(0, literal64, 2);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(0, literal65, 2);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(0, literal66, 1);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(1, ASM_IDENTIFIER, 3);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(10, literal69, 13);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(11, NON_NEG_NON_FRACTIONAL, 12);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(12, literal18, 7);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(12, literal23, 7);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(12, literal69, 13);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(2, literal2, 4);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(3, literal18, 6);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(3, literal23, 7);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(3, literal46, 5);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(3, literal69, 13);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(4, literal66, 1);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(5, ASM_IDENTIFIER, 8);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(6, ASM_IDENTIFIER, 9);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(6, NON_NEG_INTEGER, 10);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(7, NON_NEG_INTEGER, 10);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(8, literal18, 6);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(8, literal23, 7);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(8, literal69, 13);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(9, literal15, 11);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(9, literal18, 7);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(9, literal23, 7);
		ASM_PTR_ARITHMETIC_INTEL.add_transition(9, literal69, 13);

		ASM_SCOPE.add_transition(0, ASM_STATEMENT, 0);
		ASM_SCOPE.add_transition(0, IC, 0);

		ASM_STATEMENT.add_transition(0, ASM_OP, 1);
		ASM_STATEMENT.add_transition(1, IC, 2);
		ASM_STATEMENT.add_transition(1, ICR, 3);
		ASM_STATEMENT.add_transition(1, literal0, 6);
		ASM_STATEMENT.add_transition(2, IC, 2);
		ASM_STATEMENT.add_transition(2, literal0, 6);
		ASM_STATEMENT.add_transition(3, ASM_EXPRESSION, 4);
		ASM_STATEMENT.add_transition(4, IC, 4);
		ASM_STATEMENT.add_transition(4, literal0, 6);
		ASM_STATEMENT.add_transition(4, literal21, 5);
		ASM_STATEMENT.add_transition(5, ASM_EXPRESSION, 4);
		ASM_STATEMENT.add_transition(5, IC, 5);
		ASM_STATEMENT.add_transition(5, literal0, 6);
		ASM_STATEMENT.add_transition(5, literal21, 5);

		ASSIGNMENT.add_transition(0, EXPRESSION, 1);
		ASSIGNMENT.add_transition(1, IC, 1);
		ASSIGNMENT.add_transition(1, literal152, 2);
		ASSIGNMENT.add_transition(1, literal50, 2);
		ASSIGNMENT.add_transition(2, EXPRESSION, 3);
		ASSIGNMENT.add_transition(2, IC, 2);
		ASSIGNMENT.add_transition(3, IC, 1);
		ASSIGNMENT.add_transition(3, literal152, 2);
		ASSIGNMENT.add_transition(3, literal50, 2);

		BIJECTION.add_transition(0, EXPRESSION, 1);
		BIJECTION.add_transition(1, IC, 1);
		BIJECTION.add_transition(1, literal156, 2);
		BIJECTION.add_transition(1, literal51, 2);
		BIJECTION.add_transition(2, EXPRESSION, 3);
		BIJECTION.add_transition(2, IC, 2);

		BINARY_ARITHMETIC_OP.add_transition(0, ADDITION, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, ADD_SUB, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, DIVISION, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, EXPONENTIATION, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, MULTIPLICATIVE_OP, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, SHIFTL, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, SHIFTR, 1);
		BINARY_ARITHMETIC_OP.add_transition(0, SUBTRACTION, 1);

		BINARY_COLLECTION_OP.add_transition(0, INTERSECTION, 1);
		BINARY_COLLECTION_OP.add_transition(0, SYMMETRIC_DIFFERENCE, 1);
		BINARY_COLLECTION_OP.add_transition(0, UNION, 1);

		BINARY_LOGICAL_OP.add_transition(0, AND, 1);
		BINARY_LOGICAL_OP.add_transition(0, BIJECTION, 1);
		BINARY_LOGICAL_OP.add_transition(0, IFF, 1);
		BINARY_LOGICAL_OP.add_transition(0, IMPLICATION, 1);
		BINARY_LOGICAL_OP.add_transition(0, MAPS_TO, 1);
		BINARY_LOGICAL_OP.add_transition(0, NAND, 1);
		BINARY_LOGICAL_OP.add_transition(0, NOR, 1);
		BINARY_LOGICAL_OP.add_transition(0, OR, 1);
		BINARY_LOGICAL_OP.add_transition(0, XOR, 1);

		BINARY_OP.add_transition(0, BINARY_ARITHMETIC_OP, 1);
		BINARY_OP.add_transition(0, BINARY_COLLECTION_OP, 1);
		BINARY_OP.add_transition(0, BINARY_LOGICAL_OP, 1);
		BINARY_OP.add_transition(0, BITWISE_OP, 1);
		BINARY_OP.add_transition(0, CONSTRUCTIVE_OP, 1);
		BINARY_OP.add_transition(0, INTEGER_DIVISION, 1);
		BINARY_OP.add_transition(0, MODULATION, 1);
		BINARY_OP.add_transition(0, RELATIONAL_OP, 1);

		BITWISE_OP.add_transition(0, BIT_AND, 1);
		BITWISE_OP.add_transition(0, BIT_OR, 1);
		BITWISE_OP.add_transition(0, BIT_XOR, 1);

		BIT_AND.add_transition(0, EXPRESSION, 1);
		BIT_AND.add_transition(1, IC, 1);
		BIT_AND.add_transition(1, literal10, 2);
		BIT_AND.add_transition(2, EXPRESSION, 3);
		BIT_AND.add_transition(2, IC, 2);

		BIT_NOT.add_transition(0, literal145, 1);
		BIT_NOT.add_transition(1, EXPRESSION, 2);
		BIT_NOT.add_transition(1, IC, 1);

		BIT_OR.add_transition(0, EXPRESSION, 1);
		BIT_OR.add_transition(1, IC, 1);
		BIT_OR.add_transition(1, literal141, 2);
		BIT_OR.add_transition(2, EXPRESSION, 3);
		BIT_OR.add_transition(2, IC, 2);

		BIT_XOR.add_transition(0, EXPRESSION, 1);
		BIT_XOR.add_transition(1, IC, 1);
		BIT_XOR.add_transition(1, literal71, 2);
		BIT_XOR.add_transition(2, EXPRESSION, 3);
		BIT_XOR.add_transition(2, IC, 2);

		BOOL.add_transition(0, literal126, 1);
		BOOL.add_transition(0, literal92, 1);

		CARDINALITY.add_transition(0, literal7, 1);
		CARDINALITY.add_transition(1, EXPRESSION, 2);
		CARDINALITY.add_transition(1, IC, 1);

		CAST.add_transition(0, PARENTHETICAL, 1);
		CAST.add_transition(1, EXPRESSION, 2);
		CAST.add_transition(1, IC, 1);

		CASTS.add_transition(0, EXPRESSION, 1);
		CASTS.add_transition(1, IC, 1);
		CASTS.add_transition(1, literal85, 2);
		CASTS.add_transition(2, EXPRESSION, 3);
		CASTS.add_transition(2, IC, 2);

		CEILING.add_transition(0, literal137, 1);
		CEILING.add_transition(0, literal182, 2);
		CEILING.add_transition(1, EXPRESSION, 3);
		CEILING.add_transition(1, IC, 1);
		CEILING.add_transition(2, EXPRESSION, 4);
		CEILING.add_transition(2, IC, 2);
		CEILING.add_transition(3, IC, 3);
		CEILING.add_transition(3, literal11, 5);
		CEILING.add_transition(4, IC, 4);
		CEILING.add_transition(4, literal183, 5);

		COMMENT.add_transition(0, literal29, 1);
		COMMENT.add_transition(1, literal17, 2);
		COMMENT.add_transition(1, parlex::builtins::all, 1);

		COMPLEMENT.add_transition(0, EXPRESSION, 1);
		COMPLEMENT.add_transition(1, IC, 1);
		COMPLEMENT.add_transition(1, literal151, 2);

		COMPOSITION.add_transition(0, EXPRESSION, 1);
		COMPOSITION.add_transition(1, IC, 1);
		COMPOSITION.add_transition(1, literal166, 2);
		COMPOSITION.add_transition(1, literal75, 2);
		COMPOSITION.add_transition(2, EXPRESSION, 3);
		COMPOSITION.add_transition(2, IC, 2);

		COMPOUND.add_transition(0, EXPRESSION, 1);
		COMPOUND.add_transition(1, IC, 1);
		COMPOUND.add_transition(1, literal136, 2);
		COMPOUND.add_transition(2, EXPRESSION, 3);
		COMPOUND.add_transition(2, IC, 2);

		CONDITIONAL.add_transition(0, EXPRESSION, 1);
		CONDITIONAL.add_transition(1, IC, 1);
		CONDITIONAL.add_transition(1, literal59, 2);
		CONDITIONAL.add_transition(2, EXPRESSION, 3);
		CONDITIONAL.add_transition(2, IC, 2);
		CONDITIONAL.add_transition(3, IC, 3);
		CONDITIONAL.add_transition(3, literal46, 4);
		CONDITIONAL.add_transition(4, EXPRESSION, 5);
		CONDITIONAL.add_transition(4, IC, 4);

		CONSTRUCTIVE_OP.add_transition(0, COMPOSITION, 1);
		CONSTRUCTIVE_OP.add_transition(0, COMPOUND, 1);
		CONSTRUCTIVE_OP.add_transition(0, NULL_COALESCE, 1);
		CONSTRUCTIVE_OP.add_transition(0, PREPEND, 1);

		CROSS_PRODUCT.add_transition(0, EXPRESSION, 1);
		CROSS_PRODUCT.add_transition(1, IC, 1);
		CROSS_PRODUCT.add_transition(1, literal148, 2);
		CROSS_PRODUCT.add_transition(1, literal76, 2);
		CROSS_PRODUCT.add_transition(2, EXPRESSION, 3);
		CROSS_PRODUCT.add_transition(2, IC, 2);

		DECLARATION.add_transition(0, DECLARATION_PART, 5);
		DECLARATION.add_transition(0, IMPLICIT_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(0, TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(0, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(0, VOLATILE_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(0, XML_DOC_STRING, 3);
		DECLARATION.add_transition(0, literal91, 2);
		DECLARATION.add_transition(1, DECLARATION_PART, 5);
		DECLARATION.add_transition(1, IC, 1);
		DECLARATION.add_transition(2, DECLARATION_PART, 5);
		DECLARATION.add_transition(2, IC, 2);
		DECLARATION.add_transition(2, IMPLICIT_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(2, TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(2, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(2, VOLATILE_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(3, DECLARATION_PART, 5);
		DECLARATION.add_transition(3, IC, 3);
		DECLARATION.add_transition(3, IMPLICIT_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(3, TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(3, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(3, VOLATILE_TYPE_DEREFERENCE, 1);
		DECLARATION.add_transition(3, literal91, 2);
		DECLARATION.add_transition(4, DECLARATION_PART, 5);
		DECLARATION.add_transition(4, IC, 4);
		DECLARATION.add_transition(4, XML_DOC_STRING, 1);
		DECLARATION.add_transition(5, IC, 5);
		DECLARATION.add_transition(5, literal21, 4);

		DECLARATION_PART.add_transition(0, IDENTIFIER, 2);
		DECLARATION_PART.add_transition(1, EXPRESSION, 3);
		DECLARATION_PART.add_transition(1, IC, 1);
		DECLARATION_PART.add_transition(2, IC, 2);
		DECLARATION_PART.add_transition(2, literal152, 1);
		DECLARATION_PART.add_transition(2, literal50, 1);

		DEFINITION.add_transition(0, DEFINITION_PART, 4);
		DEFINITION.add_transition(0, IMPLICIT_TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(0, TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(0, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(0, VOLATILE_TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(0, XML_DOC_STRING, 2);
		DEFINITION.add_transition(1, DEFINITION_PART, 4);
		DEFINITION.add_transition(1, IC, 1);
		DEFINITION.add_transition(2, DEFINITION_PART, 4);
		DEFINITION.add_transition(2, IC, 2);
		DEFINITION.add_transition(2, IMPLICIT_TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(2, TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(2, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(2, VOLATILE_TYPE_DEREFERENCE, 1);
		DEFINITION.add_transition(3, DEFINITION_PART, 4);
		DEFINITION.add_transition(3, IC, 3);
		DEFINITION.add_transition(3, XML_DOC_STRING, 1);
		DEFINITION.add_transition(4, IC, 4);
		DEFINITION.add_transition(4, literal21, 3);

		DEFINITION_PART.add_transition(0, IDENTIFIER, 1);
		DEFINITION_PART.add_transition(1, IC, 1);
		DEFINITION_PART.add_transition(1, literal47, 2);
		DEFINITION_PART.add_transition(2, EXPRESSION, 3);
		DEFINITION_PART.add_transition(2, IC, 2);

		DELTA.add_transition(0, literal150, 1);
		DELTA.add_transition(0, literal73, 1);
		DELTA.add_transition(1, EXPRESSION, 4);
		DELTA.add_transition(1, literal70, 2);
		DELTA.add_transition(2, WHOLE_NUMBER, 3);
		DELTA.add_transition(3, EXPRESSION, 4);

		DIMENSION.add_transition(0, DIMENSIONAL_ANALYSIS_OP, 1);
		DIMENSION.add_transition(0, IDENTIFIER, 1);

		DIMENSIONAL_ANALYSIS_OP.add_transition(0, UNIT_DIVISION, 1);
		DIMENSIONAL_ANALYSIS_OP.add_transition(0, UNIT_EXPONENTIATION, 1);
		DIMENSIONAL_ANALYSIS_OP.add_transition(0, UNIT_MULTIPLICATION, 1);

		DIMENSIONAL_NUMBER.add_transition(0, NON_NEG_NUMBER, 1);
		DIMENSIONAL_NUMBER.add_transition(1, DIMENSION, 2);

		DIVISION.add_transition(0, EXPRESSION, 1);
		DIVISION.add_transition(1, IC, 1);
		DIVISION.add_transition(1, literal149, 2);
		DIVISION.add_transition(1, literal28, 2);
		DIVISION.add_transition(2, EXPRESSION, 3);
		DIVISION.add_transition(2, IC, 2);

		DO.add_transition(0, literal88, 1);
		DO.add_transition(1, EXPRESSION, 3);
		DO.add_transition(1, IC, 1);
		DO.add_transition(2, IC, 2);
		DO.add_transition(2, PARENTHETICAL, 4);
		DO.add_transition(3, IC, 3);
		DO.add_transition(3, literal130, 2);
		DO.add_transition(3, literal132, 2);

		DOT_PRODUCT.add_transition(0, EXPRESSION, 1);
		DOT_PRODUCT.add_transition(1, IC, 1);
		DOT_PRODUCT.add_transition(1, literal181, 2);
		DOT_PRODUCT.add_transition(1, literal74, 2);
		DOT_PRODUCT.add_transition(2, EXPRESSION, 3);
		DOT_PRODUCT.add_transition(2, IC, 2);

		EMBEDDED_COMMENT.add_transition(0, literal30, 1);
		EMBEDDED_COMMENT.add_transition(1, EMBEDDED_COMMENT_INTERIOR, 2);
		EMBEDDED_COMMENT.add_transition(2, literal16, 3);

		EMBEDDED_COMMENT_INTERIOR.add_transition(0, PAYLOAD, 3);
		EMBEDDED_COMMENT_INTERIOR.add_transition(0, literal15, 1);
		EMBEDDED_COMMENT_INTERIOR.add_transition(1, EMBEDDED_COMMENT_INTERIOR, 2);
		EMBEDDED_COMMENT_INTERIOR.add_transition(2, literal15, 3);

		EMBEDDED_STRING.add_transition(0, literal4, 3);
		EMBEDDED_STRING.add_transition(0, literal5, 1);
		EMBEDDED_STRING.add_transition(0, literal6, 2);
		EMBEDDED_STRING.add_transition(1, parlex::builtins::not_double_quote, 4);
		EMBEDDED_STRING.add_transition(2, PAYLOAD, 5);
		EMBEDDED_STRING.add_transition(3, EMBEDDED_STRING, 6);
		EMBEDDED_STRING.add_transition(4, literal5, 7);
		EMBEDDED_STRING.add_transition(4, parlex::builtins::all, 4);
		EMBEDDED_STRING.add_transition(5, literal1, 7);
		EMBEDDED_STRING.add_transition(6, literal4, 7);

		END_OF_LINE_COMMENT.add_transition(0, literal31, 1);
		END_OF_LINE_COMMENT.add_transition(1, literal0, 2);
		END_OF_LINE_COMMENT.add_transition(1, parlex::builtins::not_newline, 1);

		EQUALITY_CHAIN.add_transition(0, EXPRESSION, 1);
		EQUALITY_CHAIN.add_transition(1, IC, 1);
		EQUALITY_CHAIN.add_transition(1, literal54, 2);
		EQUALITY_CHAIN.add_transition(2, EXPRESSION, 3);
		EQUALITY_CHAIN.add_transition(2, IC, 2);
		EQUALITY_CHAIN.add_transition(3, IC, 3);
		EQUALITY_CHAIN.add_transition(3, literal54, 2);

		EXISTS.add_transition(0, literal160, 1);
		EXISTS.add_transition(1, EXPRESSION, 2);
		EXISTS.add_transition(1, IC, 1);

		EXISTS_ONE.add_transition(0, literal161, 1);
		EXISTS_ONE.add_transition(1, EXPRESSION, 2);
		EXISTS_ONE.add_transition(1, IC, 1);

		EXPONENTIATION.add_transition(0, EXPRESSION, 1);
		EXPONENTIATION.add_transition(1, IC, 1);
		EXPONENTIATION.add_transition(1, literal70, 2);
		EXPONENTIATION.add_transition(2, EXPRESSION, 3);
		EXPONENTIATION.add_transition(2, IC, 2);

		EXPRESSION.add_transition(0, ALLOCATION, 1);
		EXPRESSION.add_transition(0, ARRAY, 1);
		EXPRESSION.add_transition(0, ASM_FUNCTION, 1);
		EXPRESSION.add_transition(0, BINARY_OP, 1);
		EXPRESSION.add_transition(0, BOOL, 1);
		EXPRESSION.add_transition(0, CAST, 1);
		EXPRESSION.add_transition(0, CEILING, 1);
		EXPRESSION.add_transition(0, COMPLEMENT, 1);
		EXPRESSION.add_transition(0, CONDITIONAL, 1);
		EXPRESSION.add_transition(0, DELTA, 1);
		EXPRESSION.add_transition(0, DIMENSIONAL_NUMBER, 1);
		EXPRESSION.add_transition(0, EMBEDDED_STRING, 1);
		EXPRESSION.add_transition(0, EQUALITY_CHAIN, 1);
		EXPRESSION.add_transition(0, FACTORIAL, 1);
		EXPRESSION.add_transition(0, FLOOR, 1);
		EXPRESSION.add_transition(0, FUNCTION, 1);
		EXPRESSION.add_transition(0, GREATER_CHAIN, 1);
		EXPRESSION.add_transition(0, IDENTIFIER, 1);
		EXPRESSION.add_transition(0, IF, 1);
		EXPRESSION.add_transition(0, INVOCATION, 1);
		EXPRESSION.add_transition(0, LESSER_CHAIN, 1);
		EXPRESSION.add_transition(0, LIST, 1);
		EXPRESSION.add_transition(0, MAGNITUDE, 1);
		EXPRESSION.add_transition(0, MAP, 1);
		EXPRESSION.add_transition(0, MEMBER_ACCESS, 1);
		EXPRESSION.add_transition(0, NEAREST_INTEGER, 1);
		EXPRESSION.add_transition(0, NON_NEG_NUMBER, 1);
		EXPRESSION.add_transition(0, PARENTHETICAL, 1);
		EXPRESSION.add_transition(0, PROPERTY, 1);
		EXPRESSION.add_transition(0, RADICAL, 1);
		EXPRESSION.add_transition(0, RANGE, 1);
		EXPRESSION.add_transition(0, SET, 1);
		EXPRESSION.add_transition(0, SET_COMPREHENSION, 1);
		EXPRESSION.add_transition(0, SUBSET_CHAIN, 1);
		EXPRESSION.add_transition(0, SUPERSET_CHAIN, 1);
		EXPRESSION.add_transition(0, TUPLE, 1);
		EXPRESSION.add_transition(0, TYPE, 1);
		EXPRESSION.add_transition(0, UNARY_OP, 1);
		EXPRESSION.add_transition(0, VECTOR_NORM, 1);
		EXPRESSION.add_transition(0, literal107, 1);
		EXPRESSION.add_transition(0, literal123, 1);
		EXPRESSION.add_transition(0, literal124, 1);
		EXPRESSION.add_transition(0, parlex::builtins::c_string, 1);

		FACTORIAL.add_transition(0, EXPRESSION, 1);
		FACTORIAL.add_transition(1, IC, 1);
		FACTORIAL.add_transition(1, literal3, 2);

		FLOOR.add_transition(0, literal140, 1);
		FLOOR.add_transition(0, literal184, 2);
		FLOOR.add_transition(1, EXPRESSION, 3);
		FLOOR.add_transition(1, IC, 1);
		FLOOR.add_transition(2, EXPRESSION, 4);
		FLOOR.add_transition(2, IC, 2);
		FLOOR.add_transition(3, IC, 3);
		FLOOR.add_transition(3, literal77, 5);
		FLOOR.add_transition(4, IC, 4);
		FLOOR.add_transition(4, literal185, 5);

		FOR.add_transition(0, literal94, 1);
		FOR.add_transition(1, IC, 1);
		FOR.add_transition(1, literal12, 2);
		FOR.add_transition(2, EXPRESSION, 3);
		FOR.add_transition(2, IC, 2);
		FOR.add_transition(2, STATEMENT_SCOPE, 4);
		FOR.add_transition(3, IC, 3);
		FOR.add_transition(3, literal48, 5);
		FOR.add_transition(4, EXPRESSION, 3);
		FOR.add_transition(4, IC, 4);
		FOR.add_transition(5, ASSIGNMENT, 6);
		FOR.add_transition(5, EXPRESSION, 6);
		FOR.add_transition(5, IC, 5);
		FOR.add_transition(5, literal14, 7);
		FOR.add_transition(6, IC, 6);
		FOR.add_transition(6, literal14, 7);
		FOR.add_transition(7, EXPRESSION, 8);
		FOR.add_transition(7, IC, 7);

		FOR_COLLECTION.add_transition(0, literal94, 1);
		FOR_COLLECTION.add_transition(1, IC, 1);
		FOR_COLLECTION.add_transition(1, literal12, 2);
		FOR_COLLECTION.add_transition(2, EXPRESSION, 3);
		FOR_COLLECTION.add_transition(2, IC, 2);
		FOR_COLLECTION.add_transition(2, IDENTIFIER, 3);
		FOR_COLLECTION.add_transition(2, IMPLICIT_TYPE_DEREFERENCE, 4);
		FOR_COLLECTION.add_transition(2, TYPE_DEREFERENCE, 4);
		FOR_COLLECTION.add_transition(3, IC, 3);
		FOR_COLLECTION.add_transition(3, literal102, 5);
		FOR_COLLECTION.add_transition(3, literal162, 5);
		FOR_COLLECTION.add_transition(4, IC, 4);
		FOR_COLLECTION.add_transition(4, IDENTIFIER, 3);
		FOR_COLLECTION.add_transition(5, EXPRESSION, 6);
		FOR_COLLECTION.add_transition(5, IC, 5);
		FOR_COLLECTION.add_transition(6, IC, 6);
		FOR_COLLECTION.add_transition(6, literal14, 7);
		FOR_COLLECTION.add_transition(7, EXPRESSION, 8);
		FOR_COLLECTION.add_transition(7, IC, 7);

		FREE.add_transition(0, literal95, 1);
		FREE.add_transition(1, EXPRESSION, 2);
		FREE.add_transition(1, IC, 1);

		FUNCTION.add_transition(0, FUNCTION_MODIFIER, 2);
		FUNCTION.add_transition(0, literal12, 3);
		FUNCTION.add_transition(0, literal134, 1);
		FUNCTION.add_transition(1, STATEMENT_SCOPE, 4);
		FUNCTION.add_transition(2, literal134, 1);
		FUNCTION.add_transition(3, IC, 3);
		FUNCTION.add_transition(3, PARAMETER, 5);
		FUNCTION.add_transition(3, literal14, 6);
		FUNCTION.add_transition(4, literal143, 8);
		FUNCTION.add_transition(5, IC, 5);
		FUNCTION.add_transition(5, literal14, 6);
		FUNCTION.add_transition(5, literal21, 7);
		FUNCTION.add_transition(6, FUNCTION_MODIFIER, 2);
		FUNCTION.add_transition(6, IC, 6);
		FUNCTION.add_transition(6, literal134, 1);
		FUNCTION.add_transition(7, IC, 7);
		FUNCTION.add_transition(7, PARAMETER, 5);

		FUNCTION_MODIFIER.add_transition(0, FUNCTION_MODIFIER_ATOMIC, 1);
		FUNCTION_MODIFIER.add_transition(0, FUNCTION_MODIFIER_MODEL, 1);
		FUNCTION_MODIFIER.add_transition(0, FUNCTION_MODIFIER_NO_THROW, 1);
		FUNCTION_MODIFIER.add_transition(0, FUNCTION_MODIFIER_PLATFORM, 1);
		FUNCTION_MODIFIER.add_transition(0, FUNCTION_MODIFIER_STABILITY, 1);
		FUNCTION_MODIFIER.add_transition(1, IC, 1);

		FUNCTION_MODIFIER_ATOMIC.add_transition(0, literal83, 2);
		FUNCTION_MODIFIER_ATOMIC.add_transition(1, FUNCTION_MODIFIER_MODEL, 3);
		FUNCTION_MODIFIER_ATOMIC.add_transition(1, FUNCTION_MODIFIER_PLATFORM, 3);
		FUNCTION_MODIFIER_ATOMIC.add_transition(2, ICR, 1);

		FUNCTION_MODIFIER_MODEL.add_transition(0, literal108, 1);
		FUNCTION_MODIFIER_MODEL.add_transition(0, literal116, 1);
		FUNCTION_MODIFIER_MODEL.add_transition(0, literal99, 1);

		FUNCTION_MODIFIER_NO_THROW.add_transition(0, literal106, 2);
		FUNCTION_MODIFIER_NO_THROW.add_transition(1, FUNCTION_MODIFIER_ATOMIC, 3);
		FUNCTION_MODIFIER_NO_THROW.add_transition(1, FUNCTION_MODIFIER_MODEL, 3);
		FUNCTION_MODIFIER_NO_THROW.add_transition(1, FUNCTION_MODIFIER_PLATFORM, 3);
		FUNCTION_MODIFIER_NO_THROW.add_transition(2, ICR, 1);

		FUNCTION_MODIFIER_PLATFORM.add_transition(0, PLATFORM, 2);
		FUNCTION_MODIFIER_PLATFORM.add_transition(1, FUNCTION_MODIFIER_MODEL, 3);
		FUNCTION_MODIFIER_PLATFORM.add_transition(1, PLATFORM, 2);
		FUNCTION_MODIFIER_PLATFORM.add_transition(2, ICR, 1);

		FUNCTION_MODIFIER_STABILITY.add_transition(0, literal119, 2);
		FUNCTION_MODIFIER_STABILITY.add_transition(0, literal129, 2);
		FUNCTION_MODIFIER_STABILITY.add_transition(1, FUNCTION_MODIFIER_ATOMIC, 3);
		FUNCTION_MODIFIER_STABILITY.add_transition(1, FUNCTION_MODIFIER_MODEL, 3);
		FUNCTION_MODIFIER_STABILITY.add_transition(1, FUNCTION_MODIFIER_NO_THROW, 3);
		FUNCTION_MODIFIER_STABILITY.add_transition(1, FUNCTION_MODIFIER_PLATFORM, 3);
		FUNCTION_MODIFIER_STABILITY.add_transition(2, ICR, 1);

		GETTER.add_transition(0, literal96, 1);
		GETTER.add_transition(1, IC, 1);
		GETTER.add_transition(1, literal47, 2);
		GETTER.add_transition(2, EXPRESSION, 3);
		GETTER.add_transition(2, IC, 2);

		GREATER_CHAIN.add_transition(0, EXPRESSION, 1);
		GREATER_CHAIN.add_transition(1, IC, 1);
		GREATER_CHAIN.add_transition(1, literal174, 2);
		GREATER_CHAIN.add_transition(1, literal54, 2);
		GREATER_CHAIN.add_transition(1, literal56, 2);
		GREATER_CHAIN.add_transition(1, literal57, 2);
		GREATER_CHAIN.add_transition(2, EXPRESSION, 3);
		GREATER_CHAIN.add_transition(2, IC, 2);
		GREATER_CHAIN.add_transition(3, IC, 3);
		GREATER_CHAIN.add_transition(3, literal174, 2);
		GREATER_CHAIN.add_transition(3, literal54, 2);
		GREATER_CHAIN.add_transition(3, literal56, 2);
		GREATER_CHAIN.add_transition(3, literal57, 2);

		HAS.add_transition(0, EXPRESSION, 1);
		HAS.add_transition(1, IC, 1);
		HAS.add_transition(1, literal164, 2);
		HAS.add_transition(1, literal97, 2);
		HAS.add_transition(2, EXPRESSION, 3);
		HAS.add_transition(2, IC, 2);

		HEX.add_transition(0, literal36, 1);
		HEX.add_transition(1, parlex::builtins::hexadecimal_digit, 2);
		HEX.add_transition(2, parlex::builtins::hexadecimal_digit, 2);

		IC.add_transition(0, COMMENT, 1);
		IC.add_transition(0, EMBEDDED_COMMENT, 1);
		IC.add_transition(0, END_OF_LINE_COMMENT, 1);
		IC.add_transition(0, WS, 1);

		ICR.add_transition(0, IC, 1);
		ICR.add_transition(1, IC, 1);

		IDENTIFIER.add_transition(0, literal72, 1);
		IDENTIFIER.add_transition(0, parlex::builtins::letter, 1);
		IDENTIFIER.add_transition(1, literal72, 1);
		IDENTIFIER.add_transition(1, parlex::builtins::letter, 1);
		IDENTIFIER.add_transition(1, parlex::builtins::number, 1);

		IF.add_transition(0, literal98, 1);
		IF.add_transition(1, IC, 1);
		IF.add_transition(1, PARENTHETICAL, 2);
		IF.add_transition(2, EXPRESSION, 4);
		IF.add_transition(2, IC, 2);
		IF.add_transition(3, EXPRESSION, 5);
		IF.add_transition(3, IC, 3);
		IF.add_transition(4, IC, 4);
		IF.add_transition(4, literal89, 1);
		IF.add_transition(4, literal90, 3);

		IFF.add_transition(0, EXPRESSION, 1);
		IFF.add_transition(1, IC, 1);
		IFF.add_transition(1, literal158, 2);
		IFF.add_transition(1, literal53, 2);
		IFF.add_transition(2, EXPRESSION, 3);
		IFF.add_transition(2, IC, 2);

		IMPLICATION.add_transition(0, EXPRESSION, 1);
		IMPLICATION.add_transition(1, IC, 1);
		IMPLICATION.add_transition(1, literal157, 2);
		IMPLICATION.add_transition(1, literal56, 2);
		IMPLICATION.add_transition(2, EXPRESSION, 3);
		IMPLICATION.add_transition(2, IC, 2);

		IMPLICIT_TYPE_DEREFERENCE.add_transition(0, literal49, 1);
		IMPLICIT_TYPE_DEREFERENCE.add_transition(1, IC, 1);
		IMPLICIT_TYPE_DEREFERENCE.add_transition(1, literal57, 2);

		IMPORT.add_transition(0, literal101, 1);
		IMPORT.add_transition(1, EXPRESSION, 2);
		IMPORT.add_transition(1, IC, 1);

		IN.add_transition(0, EXPRESSION, 1);
		IN.add_transition(1, IC, 1);
		IN.add_transition(1, literal102, 2);
		IN.add_transition(1, literal162, 2);
		IN.add_transition(2, EXPRESSION, 3);
		IN.add_transition(2, IC, 2);

		INEQUALITY.add_transition(0, EXPRESSION, 1);
		INEQUALITY.add_transition(1, IC, 1);
		INEQUALITY.add_transition(1, literal172, 2);
		INEQUALITY.add_transition(1, literal32, 2);
		INEQUALITY.add_transition(2, EXPRESSION, 3);
		INEQUALITY.add_transition(2, IC, 2);

		INHERITANCE_LIST.add_transition(0, EXPRESSION, 3);
		INHERITANCE_LIST.add_transition(0, VISIBILITY_MODIFIER, 1);
		INHERITANCE_LIST.add_transition(1, EXPRESSION, 3);
		INHERITANCE_LIST.add_transition(1, IC, 1);
		INHERITANCE_LIST.add_transition(2, EXPRESSION, 3);
		INHERITANCE_LIST.add_transition(2, IC, 2);
		INHERITANCE_LIST.add_transition(2, VISIBILITY_MODIFIER, 1);
		INHERITANCE_LIST.add_transition(3, IC, 3);
		INHERITANCE_LIST.add_transition(3, literal21, 2);

		INTEGER_DIVISION.add_transition(0, EXPRESSION, 1);
		INTEGER_DIVISION.add_transition(1, IC, 1);
		INTEGER_DIVISION.add_transition(1, literal68, 2);
		INTEGER_DIVISION.add_transition(2, EXPRESSION, 3);
		INTEGER_DIVISION.add_transition(2, IC, 2);

		INTERSECTION.add_transition(0, EXPRESSION, 1);
		INTERSECTION.add_transition(1, IC, 1);
		INTERSECTION.add_transition(1, literal170, 2);
		INTERSECTION.add_transition(2, EXPRESSION, 3);
		INTERSECTION.add_transition(2, IC, 2);

		INVOCATION.add_transition(0, ARRAY_INVOCATION, 1);
		INVOCATION.add_transition(0, PARENTHETICAL_INVOCATION, 1);
		INVOCATION.add_transition(0, TYPE_INVOCATION, 1);

		IS.add_transition(0, EXPRESSION, 1);
		IS.add_transition(1, IC, 1);
		IS.add_transition(1, literal105, 2);
		IS.add_transition(2, EXPRESSION, 3);
		IS.add_transition(2, IC, 2);

		KLEENE_STAR.add_transition(0, EXPRESSION, 1);
		KLEENE_STAR.add_transition(1, IC, 1);
		KLEENE_STAR.add_transition(1, literal15, 2);

		LESSER_CHAIN.add_transition(0, EXPRESSION, 1);
		LESSER_CHAIN.add_transition(1, IC, 1);
		LESSER_CHAIN.add_transition(1, literal173, 2);
		LESSER_CHAIN.add_transition(1, literal49, 2);
		LESSER_CHAIN.add_transition(1, literal54, 2);
		LESSER_CHAIN.add_transition(1, literal55, 2);
		LESSER_CHAIN.add_transition(2, EXPRESSION, 4);
		LESSER_CHAIN.add_transition(2, IC, 2);
		LESSER_CHAIN.add_transition(3, EXPRESSION, 4);
		LESSER_CHAIN.add_transition(4, IC, 4);
		LESSER_CHAIN.add_transition(4, literal173, 3);
		LESSER_CHAIN.add_transition(4, literal49, 3);
		LESSER_CHAIN.add_transition(4, literal54, 3);
		LESSER_CHAIN.add_transition(4, literal55, 3);

		LIST.add_transition(0, literal67, 1);
		LIST.add_transition(1, EXPRESSION, 2);
		LIST.add_transition(1, IC, 1);
		LIST.add_transition(1, literal139, 4);
		LIST.add_transition(2, IC, 2);
		LIST.add_transition(2, literal139, 4);
		LIST.add_transition(2, literal22, 3);
		LIST.add_transition(3, EXPRESSION, 2);
		LIST.add_transition(3, IC, 3);

		LOOP.add_transition(0, literal130, 1);
		LOOP.add_transition(0, literal132, 1);
		LOOP.add_transition(1, IC, 1);
		LOOP.add_transition(1, PARENTHETICAL, 2);
		LOOP.add_transition(2, EXPRESSION, 3);
		LOOP.add_transition(2, IC, 2);

		MAGNITUDE.add_transition(0, literal136, 1);
		MAGNITUDE.add_transition(1, EXPRESSION, 2);
		MAGNITUDE.add_transition(1, IC, 1);
		MAGNITUDE.add_transition(2, IC, 2);
		MAGNITUDE.add_transition(2, literal136, 3);

		MAP.add_transition(0, literal134, 1);
		MAP.add_transition(1, EXPRESSION, 2);
		MAP.add_transition(1, IC, 1);
		MAP.add_transition(1, literal143, 6);
		MAP.add_transition(2, IC, 2);
		MAP.add_transition(2, literal46, 3);
		MAP.add_transition(3, EXPRESSION, 4);
		MAP.add_transition(3, IC, 3);
		MAP.add_transition(4, IC, 4);
		MAP.add_transition(4, literal143, 6);
		MAP.add_transition(4, literal21, 5);
		MAP.add_transition(5, EXPRESSION, 2);
		MAP.add_transition(5, IC, 5);

		MAPS_TO.add_transition(0, EXPRESSION, 1);
		MAPS_TO.add_transition(1, IC, 1);
		MAPS_TO.add_transition(1, literal154, 2);
		MAPS_TO.add_transition(1, literal25, 2);
		MAPS_TO.add_transition(2, EXPRESSION, 3);
		MAPS_TO.add_transition(2, IC, 2);

		MEMBER_ACCESS.add_transition(0, EXPRESSION, 1);
		MEMBER_ACCESS.add_transition(1, IC, 1);
		MEMBER_ACCESS.add_transition(1, literal26, 2);
		MEMBER_ACCESS.add_transition(2, IC, 2);
		MEMBER_ACCESS.add_transition(2, IDENTIFIER, 3);

		MODULATION.add_transition(0, EXPRESSION, 1);
		MODULATION.add_transition(1, IC, 1);
		MODULATION.add_transition(1, literal8, 2);
		MODULATION.add_transition(2, EXPRESSION, 3);
		MODULATION.add_transition(2, IC, 2);

		MULTIPLICATION.add_transition(0, EXPRESSION, 1);
		MULTIPLICATION.add_transition(1, IC, 1);
		MULTIPLICATION.add_transition(1, literal15, 2);
		MULTIPLICATION.add_transition(2, EXPRESSION, 3);
		MULTIPLICATION.add_transition(2, IC, 2);

		MULTIPLICATIVE_OP.add_transition(0, CROSS_PRODUCT, 1);
		MULTIPLICATIVE_OP.add_transition(0, DOT_PRODUCT, 1);
		MULTIPLICATIVE_OP.add_transition(0, MULTIPLICATION, 1);

		NAND.add_transition(0, EXPRESSION, 1);
		NAND.add_transition(1, IC, 1);
		NAND.add_transition(1, literal153, 2);
		NAND.add_transition(2, EXPRESSION, 3);
		NAND.add_transition(2, IC, 2);

		NEAREST_INTEGER.add_transition(0, literal140, 1);
		NEAREST_INTEGER.add_transition(0, literal184, 2);
		NEAREST_INTEGER.add_transition(1, EXPRESSION, 3);
		NEAREST_INTEGER.add_transition(1, IC, 1);
		NEAREST_INTEGER.add_transition(2, EXPRESSION, 4);
		NEAREST_INTEGER.add_transition(2, IC, 2);
		NEAREST_INTEGER.add_transition(3, IC, 3);
		NEAREST_INTEGER.add_transition(3, literal11, 5);
		NEAREST_INTEGER.add_transition(4, IC, 4);
		NEAREST_INTEGER.add_transition(4, literal183, 5);

		NEGATION.add_transition(0, literal23, 1);
		NEGATION.add_transition(1, EXPRESSION, 2);
		NEGATION.add_transition(1, IC, 1);

		NON_FRACTIONAL.add_transition(0, NON_NEG_NON_FRACTIONAL, 2);
		NON_FRACTIONAL.add_transition(0, literal23, 1);
		NON_FRACTIONAL.add_transition(1, NON_NEG_NON_FRACTIONAL, 2);

		NON_NEG_FRACTIONAL.add_transition(0, literal26, 2);
		NON_NEG_FRACTIONAL.add_transition(0, parlex::builtins::decimal_digit, 1);
		NON_NEG_FRACTIONAL.add_transition(1, literal26, 3);
		NON_NEG_FRACTIONAL.add_transition(1, parlex::builtins::decimal_digit, 1);
		NON_NEG_FRACTIONAL.add_transition(2, parlex::builtins::decimal_digit, 3);
		NON_NEG_FRACTIONAL.add_transition(3, parlex::builtins::decimal_digit, 3);

		NON_NEG_INTEGER.add_transition(0, NON_ZERO_DECIMAL_DIGIT, 2);
		NON_NEG_INTEGER.add_transition(0, literal35, 1);
		NON_NEG_INTEGER.add_transition(2, parlex::builtins::decimal_digit, 2);

		NON_NEG_NON_FRACTIONAL.add_transition(0, HEX, 1);
		NON_NEG_NON_FRACTIONAL.add_transition(0, NON_NEG_INTEGER, 1);
		NON_NEG_NON_FRACTIONAL.add_transition(0, OCTAL, 1);

		NON_NEG_NUMBER.add_transition(0, NON_NEG_FRACTIONAL, 1);
		NON_NEG_NUMBER.add_transition(0, NON_NEG_NON_FRACTIONAL, 1);

		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal37, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal38, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal39, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal40, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal41, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal42, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal43, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal44, 1);
		NON_ZERO_DECIMAL_DIGIT.add_transition(0, literal45, 1);

		NOR.add_transition(0, EXPRESSION, 1);
		NOR.add_transition(1, IC, 1);
		NOR.add_transition(1, literal155, 2);
		NOR.add_transition(2, EXPRESSION, 3);
		NOR.add_transition(2, IC, 2);

		NOT.add_transition(0, literal144, 1);
		NOT.add_transition(0, literal146, 1);
		NOT.add_transition(1, EXPRESSION, 2);
		NOT.add_transition(1, IC, 1);

		NOT_HAS.add_transition(0, EXPRESSION, 1);
		NOT_HAS.add_transition(1, IC, 1);
		NOT_HAS.add_transition(1, literal165, 2);
		NOT_HAS.add_transition(1, literal33, 2);
		NOT_HAS.add_transition(2, EXPRESSION, 3);
		NOT_HAS.add_transition(2, IC, 2);

		NOT_IN.add_transition(0, EXPRESSION, 1);
		NOT_IN.add_transition(1, IC, 1);
		NOT_IN.add_transition(1, literal163, 2);
		NOT_IN.add_transition(1, literal34, 2);
		NOT_IN.add_transition(2, EXPRESSION, 3);
		NOT_IN.add_transition(2, IC, 2);

		NULL_COALESCE.add_transition(0, EXPRESSION, 1);
		NULL_COALESCE.add_transition(1, IC, 1);
		NULL_COALESCE.add_transition(1, literal60, 2);
		NULL_COALESCE.add_transition(2, EXPRESSION, 3);
		NULL_COALESCE.add_transition(2, IC, 2);

		OCTAL.add_transition(0, literal35, 1);
		OCTAL.add_transition(1, parlex::builtins::octal_digit, 2);
		OCTAL.add_transition(2, parlex::builtins::octal_digit, 2);

		OR.add_transition(0, EXPRESSION, 1);
		OR.add_transition(1, IC, 1);
		OR.add_transition(1, literal109, 2);
		OR.add_transition(1, literal169, 2);
		OR.add_transition(2, EXPRESSION, 3);
		OR.add_transition(2, IC, 2);

		PARAMETER.add_transition(0, PARAMETER_ALGEBRAIC, 1);
		PARAMETER.add_transition(0, PARAMETER_NORMAL, 1);

		PARAMETER_ALGEBRAIC.add_transition(0, EXPRESSION, 2);
		PARAMETER_ALGEBRAIC.add_transition(1, EXPRESSION, 3);
		PARAMETER_ALGEBRAIC.add_transition(1, IC, 1);
		PARAMETER_ALGEBRAIC.add_transition(2, IC, 2);
		PARAMETER_ALGEBRAIC.add_transition(2, literal54, 1);

		PARAMETER_NORMAL.add_transition(0, IDENTIFIER, 5);
		PARAMETER_NORMAL.add_transition(0, IMPLICIT_TYPE_DEREFERENCE, 2);
		PARAMETER_NORMAL.add_transition(0, TYPE_DEREFERENCE, 1);
		PARAMETER_NORMAL.add_transition(1, IC, 1);
		PARAMETER_NORMAL.add_transition(1, IDENTIFIER, 5);
		PARAMETER_NORMAL.add_transition(2, IC, 2);
		PARAMETER_NORMAL.add_transition(2, IDENTIFIER, 3);
		PARAMETER_NORMAL.add_transition(3, IC, 3);
		PARAMETER_NORMAL.add_transition(3, literal54, 4);
		PARAMETER_NORMAL.add_transition(4, EXPRESSION, 6);
		PARAMETER_NORMAL.add_transition(4, IC, 4);
		PARAMETER_NORMAL.add_transition(5, IC, 3);
		PARAMETER_NORMAL.add_transition(5, literal54, 4);

		PARENTHETICAL.add_transition(0, literal12, 1);
		PARENTHETICAL.add_transition(1, EXPRESSION, 2);
		PARENTHETICAL.add_transition(1, IC, 1);
		PARENTHETICAL.add_transition(2, IC, 2);
		PARENTHETICAL.add_transition(2, literal14, 3);

		PARENTHETICAL_INVOCATION.add_transition(0, EXPRESSION, 1);
		PARENTHETICAL_INVOCATION.add_transition(1, IC, 1);
		PARENTHETICAL_INVOCATION.add_transition(1, literal12, 2);
		PARENTHETICAL_INVOCATION.add_transition(2, EXPRESSION, 3);
		PARENTHETICAL_INVOCATION.add_transition(2, IC, 2);
		PARENTHETICAL_INVOCATION.add_transition(2, literal14, 4);
		PARENTHETICAL_INVOCATION.add_transition(2, literal21, 2);
		PARENTHETICAL_INVOCATION.add_transition(3, IC, 3);
		PARENTHETICAL_INVOCATION.add_transition(3, literal14, 4);
		PARENTHETICAL_INVOCATION.add_transition(3, literal21, 2);

		PAYLOAD.add_transition(0, parlex::builtins::all, 0);

		PLATFORM.add_transition(0, literal72, 1);
		PLATFORM.add_transition(1, PLATFORM, 1);
		PLATFORM.add_transition(1, parlex::builtins::letter, 1);
		PLATFORM.add_transition(1, parlex::builtins::number, 1);

		POST_DEC.add_transition(0, EXPRESSION, 1);
		POST_DEC.add_transition(1, IC, 1);
		POST_DEC.add_transition(1, literal24, 2);

		POST_INC.add_transition(0, EXPRESSION, 1);
		POST_INC.add_transition(1, IC, 1);
		POST_INC.add_transition(1, literal19, 2);

		PREPEND.add_transition(0, EXPRESSION, 1);
		PREPEND.add_transition(1, IC, 1);
		PREPEND.add_transition(1, literal9, 2);
		PREPEND.add_transition(2, EXPRESSION, 3);
		PREPEND.add_transition(2, IC, 2);

		PRE_DEC.add_transition(0, literal24, 1);
		PRE_DEC.add_transition(1, EXPRESSION, 2);
		PRE_DEC.add_transition(1, IC, 1);

		PRE_INC.add_transition(0, literal19, 1);
		PRE_INC.add_transition(1, EXPRESSION, 2);
		PRE_INC.add_transition(1, IC, 1);

		PROPERTY.add_transition(0, literal134, 1);
		PROPERTY.add_transition(1, GETTER, 2);
		PROPERTY.add_transition(1, IC, 1);
		PROPERTY.add_transition(1, SETTER, 3);
		PROPERTY.add_transition(2, IC, 2);
		PROPERTY.add_transition(2, literal143, 5);
		PROPERTY.add_transition(2, literal21, 4);
		PROPERTY.add_transition(3, IC, 3);
		PROPERTY.add_transition(3, literal143, 5);
		PROPERTY.add_transition(4, IC, 4);
		PROPERTY.add_transition(4, SETTER, 3);

		RADICAL.add_transition(0, literal167, 1);
		RADICAL.add_transition(1, EXPRESSION, 2);
		RADICAL.add_transition(1, IC, 1);

		RANGE.add_transition(0, literal12, 1);
		RANGE.add_transition(0, literal66, 2);
		RANGE.add_transition(1, EXPRESSION, 3);
		RANGE.add_transition(1, IC, 1);
		RANGE.add_transition(1, literal27, 4);
		RANGE.add_transition(2, EXPRESSION, 3);
		RANGE.add_transition(2, IC, 2);
		RANGE.add_transition(3, IC, 3);
		RANGE.add_transition(3, literal27, 5);
		RANGE.add_transition(4, EXPRESSION, 6);
		RANGE.add_transition(4, IC, 4);
		RANGE.add_transition(5, EXPRESSION, 6);
		RANGE.add_transition(5, IC, 5);
		RANGE.add_transition(5, literal14, 7);
		RANGE.add_transition(6, IC, 6);
		RANGE.add_transition(6, literal14, 7);
		RANGE.add_transition(6, literal69, 7);

		RELATIONAL_COLLECTION_OP.add_transition(0, HAS, 1);
		RELATIONAL_COLLECTION_OP.add_transition(0, IN, 1);
		RELATIONAL_COLLECTION_OP.add_transition(0, NOT_HAS, 1);
		RELATIONAL_COLLECTION_OP.add_transition(0, NOT_IN, 1);

		RELATIONAL_OP.add_transition(0, CASTS, 1);
		RELATIONAL_OP.add_transition(0, INEQUALITY, 1);
		RELATIONAL_OP.add_transition(0, IS, 1);
		RELATIONAL_OP.add_transition(0, RELATIONAL_COLLECTION_OP, 1);

		RETURN.add_transition(0, literal117, 1);
		RETURN.add_transition(1, EXPRESSION, 2);
		RETURN.add_transition(1, IC, 1);

		SET.add_transition(0, literal135, 1);
		SET.add_transition(1, EXPRESSION, 2);
		SET.add_transition(1, IC, 1);
		SET.add_transition(1, literal142, 4);
		SET.add_transition(2, IC, 2);
		SET.add_transition(2, literal142, 4);
		SET.add_transition(2, literal21, 3);
		SET.add_transition(3, EXPRESSION, 2);
		SET.add_transition(3, IC, 3);

		SETTER.add_transition(0, literal118, 1);
		SETTER.add_transition(1, IC, 1);
		SETTER.add_transition(1, literal47, 2);
		SETTER.add_transition(2, EXPRESSION, 3);
		SETTER.add_transition(2, IC, 2);

		SET_COMPREHENSION.add_transition(0, literal134, 1);
		SET_COMPREHENSION.add_transition(1, EXPRESSION, 2);
		SET_COMPREHENSION.add_transition(1, IC, 1);
		SET_COMPREHENSION.add_transition(2, IC, 2);
		SET_COMPREHENSION.add_transition(2, literal136, 3);
		SET_COMPREHENSION.add_transition(3, EXPRESSION, 4);
		SET_COMPREHENSION.add_transition(3, IC, 3);
		SET_COMPREHENSION.add_transition(4, IC, 4);
		SET_COMPREHENSION.add_transition(4, literal143, 5);

		SHIFTL.add_transition(0, EXPRESSION, 1);
		SHIFTL.add_transition(1, IC, 1);
		SHIFTL.add_transition(1, literal52, 2);
		SHIFTL.add_transition(2, EXPRESSION, 3);
		SHIFTL.add_transition(2, IC, 2);

		SHIFTR.add_transition(0, EXPRESSION, 1);
		SHIFTR.add_transition(1, IC, 1);
		SHIFTR.add_transition(1, literal58, 2);
		SHIFTR.add_transition(2, EXPRESSION, 3);
		SHIFTR.add_transition(2, IC, 2);

		SLICE.add_transition(0, EXPRESSION, 1);
		SLICE.add_transition(1, IC, 1);
		SLICE.add_transition(1, literal46, 2);
		SLICE.add_transition(2, EXPRESSION, 3);
		SLICE.add_transition(2, IC, 2);

		STATEMENT.add_transition(0, ASSIGNMENT, 1);
		STATEMENT.add_transition(0, DECLARATION, 1);
		STATEMENT.add_transition(0, DEFINITION, 1);
		STATEMENT.add_transition(0, DO, 1);
		STATEMENT.add_transition(0, EXPRESSION, 1);
		STATEMENT.add_transition(0, FOR, 1);
		STATEMENT.add_transition(0, FOR_COLLECTION, 1);
		STATEMENT.add_transition(0, FREE, 1);
		STATEMENT.add_transition(0, IMPORT, 1);
		STATEMENT.add_transition(0, LOOP, 1);
		STATEMENT.add_transition(0, RETURN, 1);
		STATEMENT.add_transition(0, THROW, 1);
		STATEMENT.add_transition(0, TRY, 1);
		STATEMENT.add_transition(0, literal84, 1);
		STATEMENT.add_transition(0, literal87, 1);
		STATEMENT.add_transition(1, IC, 1);
		STATEMENT.add_transition(1, literal48, 2);

		STATEMENT_SCOPE.add_transition(0, IC, 0);
		STATEMENT_SCOPE.add_transition(0, STATEMENT, 0);

		SUBSET_CHAIN.add_transition(0, EXPRESSION, 1);
		SUBSET_CHAIN.add_transition(1, IC, 1);
		SUBSET_CHAIN.add_transition(1, literal113, 2);
		SUBSET_CHAIN.add_transition(1, literal121, 2);
		SUBSET_CHAIN.add_transition(1, literal175, 2);
		SUBSET_CHAIN.add_transition(1, literal177, 2);
		SUBSET_CHAIN.add_transition(1, literal54, 2);
		SUBSET_CHAIN.add_transition(2, EXPRESSION, 4);
		SUBSET_CHAIN.add_transition(2, IC, 2);
		SUBSET_CHAIN.add_transition(3, EXPRESSION, 4);
		SUBSET_CHAIN.add_transition(4, IC, 4);
		SUBSET_CHAIN.add_transition(4, literal113, 3);
		SUBSET_CHAIN.add_transition(4, literal121, 3);
		SUBSET_CHAIN.add_transition(4, literal175, 3);
		SUBSET_CHAIN.add_transition(4, literal177, 3);
		SUBSET_CHAIN.add_transition(4, literal54, 3);

		SUBTRACTION.add_transition(0, EXPRESSION, 1);
		SUBTRACTION.add_transition(1, IC, 1);
		SUBTRACTION.add_transition(1, literal23, 2);
		SUBTRACTION.add_transition(2, EXPRESSION, 3);
		SUBTRACTION.add_transition(2, IC, 2);

		SUPERSET_CHAIN.add_transition(0, EXPRESSION, 1);
		SUPERSET_CHAIN.add_transition(1, IC, 1);
		SUPERSET_CHAIN.add_transition(1, literal114, 2);
		SUPERSET_CHAIN.add_transition(1, literal122, 2);
		SUPERSET_CHAIN.add_transition(1, literal176, 2);
		SUPERSET_CHAIN.add_transition(1, literal178, 2);
		SUPERSET_CHAIN.add_transition(1, literal54, 2);
		SUPERSET_CHAIN.add_transition(2, EXPRESSION, 4);
		SUPERSET_CHAIN.add_transition(2, IC, 2);
		SUPERSET_CHAIN.add_transition(3, EXPRESSION, 4);
		SUPERSET_CHAIN.add_transition(4, IC, 4);
		SUPERSET_CHAIN.add_transition(4, literal114, 3);
		SUPERSET_CHAIN.add_transition(4, literal122, 3);
		SUPERSET_CHAIN.add_transition(4, literal176, 3);
		SUPERSET_CHAIN.add_transition(4, literal178, 3);
		SUPERSET_CHAIN.add_transition(4, literal54, 3);

		SYMMETRIC_DIFFERENCE.add_transition(0, EXPRESSION, 1);
		SYMMETRIC_DIFFERENCE.add_transition(1, IC, 1);
		SYMMETRIC_DIFFERENCE.add_transition(1, literal180, 2);
		SYMMETRIC_DIFFERENCE.add_transition(2, EXPRESSION, 3);
		SYMMETRIC_DIFFERENCE.add_transition(2, IC, 2);

		THROW.add_transition(0, literal125, 1);
		THROW.add_transition(1, EXPRESSION, 2);
		THROW.add_transition(1, IC, 1);

		TRY.add_transition(0, literal127, 1);
		TRY.add_transition(1, EXPRESSION, 2);
		TRY.add_transition(1, IC, 1);
		TRY.add_transition(2, IC, 2);
		TRY.add_transition(2, literal86, 3);
		TRY.add_transition(3, EXPRESSION, 5);
		TRY.add_transition(3, IC, 3);
		TRY.add_transition(4, EXPRESSION, 7);
		TRY.add_transition(4, IC, 4);
		TRY.add_transition(5, IC, 6);
		TRY.add_transition(5, literal86, 3);
		TRY.add_transition(5, literal93, 4);
		TRY.add_transition(6, IC, 6);
		TRY.add_transition(6, literal93, 4);

		TUPLE.add_transition(0, literal13, 1);
		TUPLE.add_transition(1, EXPRESSION, 2);
		TUPLE.add_transition(1, IC, 1);
		TUPLE.add_transition(2, IC, 2);
		TUPLE.add_transition(2, literal138, 3);
		TUPLE.add_transition(2, literal21, 1);

		TYPE.add_transition(0, literal128, 1);
		TYPE.add_transition(1, IC, 1);
		TYPE.add_transition(1, literal100, 3);
		TYPE.add_transition(1, literal103, 4);
		TYPE.add_transition(1, literal134, 2);
		TYPE.add_transition(2, TYPE_SCOPE, 5);
		TYPE.add_transition(3, IC, 3);
		TYPE.add_transition(3, INHERITANCE_LIST, 6);
		TYPE.add_transition(4, IC, 4);
		TYPE.add_transition(4, INHERITANCE_LIST, 7);
		TYPE.add_transition(5, literal143, 8);
		TYPE.add_transition(6, IC, 6);
		TYPE.add_transition(6, literal134, 2);
		TYPE.add_transition(7, IC, 7);
		TYPE.add_transition(7, literal100, 3);
		TYPE.add_transition(7, literal134, 2);

		TYPE_DEREFERENCE.add_transition(0, literal49, 1);
		TYPE_DEREFERENCE.add_transition(1, EXPRESSION, 2);
		TYPE_DEREFERENCE.add_transition(1, IC, 1);
		TYPE_DEREFERENCE.add_transition(2, IC, 2);
		TYPE_DEREFERENCE.add_transition(2, literal57, 3);

		TYPE_INVOCATION.add_transition(0, EXPRESSION, 1);
		TYPE_INVOCATION.add_transition(1, literal49, 2);
		TYPE_INVOCATION.add_transition(2, EXPRESSION, 3);
		TYPE_INVOCATION.add_transition(2, IC, 2);
		TYPE_INVOCATION.add_transition(2, literal21, 2);
		TYPE_INVOCATION.add_transition(2, literal57, 4);
		TYPE_INVOCATION.add_transition(3, IC, 3);
		TYPE_INVOCATION.add_transition(3, literal21, 2);
		TYPE_INVOCATION.add_transition(3, literal57, 4);

		TYPE_SCOPE.add_transition(0, IC, 0);
		TYPE_SCOPE.add_transition(0, TYPE_STATEMENT, 0);

		TYPE_SCOPE_DECLARATION.add_transition(0, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(0, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(0, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(0, VISIBILITY_MODIFIER, 1);
		TYPE_SCOPE_DECLARATION.add_transition(0, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(0, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(0, XML_DOC_STRING, 4);
		TYPE_SCOPE_DECLARATION.add_transition(0, literal120, 5);
		TYPE_SCOPE_DECLARATION.add_transition(0, literal91, 3);
		TYPE_SCOPE_DECLARATION.add_transition(1, IC, 1);
		TYPE_SCOPE_DECLARATION.add_transition(1, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(1, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(1, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(1, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(1, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(1, literal120, 5);
		TYPE_SCOPE_DECLARATION.add_transition(1, literal91, 3);
		TYPE_SCOPE_DECLARATION.add_transition(2, IC, 2);
		TYPE_SCOPE_DECLARATION.add_transition(2, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(3, IC, 3);
		TYPE_SCOPE_DECLARATION.add_transition(3, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(3, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(3, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(3, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(3, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(4, IC, 4);
		TYPE_SCOPE_DECLARATION.add_transition(4, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(4, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(4, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(4, VISIBILITY_MODIFIER, 1);
		TYPE_SCOPE_DECLARATION.add_transition(4, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(4, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(4, literal120, 5);
		TYPE_SCOPE_DECLARATION.add_transition(4, literal91, 3);
		TYPE_SCOPE_DECLARATION.add_transition(5, IC, 5);
		TYPE_SCOPE_DECLARATION.add_transition(5, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(5, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(5, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(5, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(5, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DECLARATION.add_transition(5, literal91, 3);
		TYPE_SCOPE_DECLARATION.add_transition(6, IC, 6);
		TYPE_SCOPE_DECLARATION.add_transition(6, TYPE_SCOPE_DECLARATION_PART, 7);
		TYPE_SCOPE_DECLARATION.add_transition(6, XML_DOC_STRING, 2);
		TYPE_SCOPE_DECLARATION.add_transition(7, IC, 7);
		TYPE_SCOPE_DECLARATION.add_transition(7, literal21, 6);

		TYPE_SCOPE_DECLARATION_PART.add_transition(0, IDENTIFIER, 3);
		TYPE_SCOPE_DECLARATION_PART.add_transition(1, EXPRESSION, 5);
		TYPE_SCOPE_DECLARATION_PART.add_transition(1, IC, 1);
		TYPE_SCOPE_DECLARATION_PART.add_transition(2, IC, 2);
		TYPE_SCOPE_DECLARATION_PART.add_transition(2, WHOLE_NUMBER, 4);
		TYPE_SCOPE_DECLARATION_PART.add_transition(3, IC, 4);
		TYPE_SCOPE_DECLARATION_PART.add_transition(3, literal152, 1);
		TYPE_SCOPE_DECLARATION_PART.add_transition(3, literal50, 1);
		TYPE_SCOPE_DECLARATION_PART.add_transition(3, literal61, 2);
		TYPE_SCOPE_DECLARATION_PART.add_transition(4, IC, 4);
		TYPE_SCOPE_DECLARATION_PART.add_transition(4, literal152, 1);
		TYPE_SCOPE_DECLARATION_PART.add_transition(4, literal50, 1);

		TYPE_SCOPE_DEFINITION.add_transition(0, DEFINITION_PART, 6);
		TYPE_SCOPE_DEFINITION.add_transition(0, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(0, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(0, VISIBILITY_MODIFIER, 1);
		TYPE_SCOPE_DEFINITION.add_transition(0, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(0, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(0, XML_DOC_STRING, 4);
		TYPE_SCOPE_DEFINITION.add_transition(0, literal91, 3);
		TYPE_SCOPE_DEFINITION.add_transition(1, DEFINITION_PART, 6);
		TYPE_SCOPE_DEFINITION.add_transition(1, IC, 1);
		TYPE_SCOPE_DEFINITION.add_transition(1, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(1, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(1, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(1, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(1, literal91, 3);
		TYPE_SCOPE_DEFINITION.add_transition(2, DEFINITION_PART, 6);
		TYPE_SCOPE_DEFINITION.add_transition(2, IC, 2);
		TYPE_SCOPE_DEFINITION.add_transition(3, DEFINITION_PART, 6);
		TYPE_SCOPE_DEFINITION.add_transition(3, IC, 3);
		TYPE_SCOPE_DEFINITION.add_transition(3, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(3, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(3, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(3, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(4, DEFINITION_PART, 6);
		TYPE_SCOPE_DEFINITION.add_transition(4, IC, 4);
		TYPE_SCOPE_DEFINITION.add_transition(4, IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(4, TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(4, VISIBILITY_MODIFIER, 1);
		TYPE_SCOPE_DEFINITION.add_transition(4, VOLATILE_IMPLICIT_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(4, VOLATILE_TYPE_DEREFERENCE, 2);
		TYPE_SCOPE_DEFINITION.add_transition(4, literal91, 3);
		TYPE_SCOPE_DEFINITION.add_transition(5, DEFINITION_PART, 6);
		TYPE_SCOPE_DEFINITION.add_transition(5, IC, 5);
		TYPE_SCOPE_DEFINITION.add_transition(5, XML_DOC_STRING, 2);
		TYPE_SCOPE_DEFINITION.add_transition(6, IC, 6);
		TYPE_SCOPE_DEFINITION.add_transition(6, literal21, 5);

		TYPE_STATEMENT.add_transition(0, STATEMENT, 2);
		TYPE_STATEMENT.add_transition(0, TYPE_SCOPE_DECLARATION, 2);
		TYPE_STATEMENT.add_transition(0, TYPE_SCOPE_DEFINITION, 2);
		TYPE_STATEMENT.add_transition(0, VISIBILITY_MODIFIER, 1);
		TYPE_STATEMENT.add_transition(1, IC, 1);
		TYPE_STATEMENT.add_transition(1, literal46, 2);

		UNARY_ARITHMETIC_OP.add_transition(0, FACTORIAL, 1);
		UNARY_ARITHMETIC_OP.add_transition(0, NEGATION, 1);
		UNARY_ARITHMETIC_OP.add_transition(0, POST_DEC, 1);
		UNARY_ARITHMETIC_OP.add_transition(0, POST_INC, 1);
		UNARY_ARITHMETIC_OP.add_transition(0, PRE_DEC, 1);
		UNARY_ARITHMETIC_OP.add_transition(0, PRE_INC, 1);
		UNARY_ARITHMETIC_OP.add_transition(0, RADICAL, 1);

		UNARY_LOGICAL_OP.add_transition(0, ALL, 1);
		UNARY_LOGICAL_OP.add_transition(0, EXISTS, 1);
		UNARY_LOGICAL_OP.add_transition(0, EXISTS_ONE, 1);
		UNARY_LOGICAL_OP.add_transition(0, NOT, 1);

		UNARY_OP.add_transition(0, CARDINALITY, 1);
		UNARY_OP.add_transition(0, KLEENE_STAR, 1);
		UNARY_OP.add_transition(0, UNARY_ARITHMETIC_OP, 1);
		UNARY_OP.add_transition(0, UNARY_LOGICAL_OP, 1);

		UNION.add_transition(0, EXPRESSION, 1);
		UNION.add_transition(1, IC, 1);
		UNION.add_transition(1, literal171, 2);
		UNION.add_transition(2, EXPRESSION, 3);
		UNION.add_transition(2, IC, 2);

		UNIT_DIVISION.add_transition(0, DIMENSION, 1);
		UNIT_DIVISION.add_transition(1, literal28, 2);
		UNIT_DIVISION.add_transition(2, DIMENSION, 3);

		UNIT_EXPONENTIATION.add_transition(0, DIMENSION, 1);
		UNIT_EXPONENTIATION.add_transition(1, literal70, 2);
		UNIT_EXPONENTIATION.add_transition(2, NON_FRACTIONAL, 3);

		UNIT_MULTIPLICATION.add_transition(0, DIMENSION, 1);
		UNIT_MULTIPLICATION.add_transition(1, literal15, 2);
		UNIT_MULTIPLICATION.add_transition(2, DIMENSION, 3);

		VECTOR_NORM.add_transition(0, literal141, 1);
		VECTOR_NORM.add_transition(1, EXPRESSION, 2);
		VECTOR_NORM.add_transition(1, IC, 1);
		VECTOR_NORM.add_transition(2, IC, 2);
		VECTOR_NORM.add_transition(2, literal141, 3);

		VISIBILITY_MODIFIER.add_transition(0, literal104, 1);
		VISIBILITY_MODIFIER.add_transition(0, literal110, 1);
		VISIBILITY_MODIFIER.add_transition(0, literal111, 1);
		VISIBILITY_MODIFIER.add_transition(0, literal112, 1);
		VISIBILITY_MODIFIER.add_transition(0, literal115, 1);

		VOLATILE_IMPLICIT_TYPE_DEREFERENCE.add_transition(0, literal49, 1);
		VOLATILE_IMPLICIT_TYPE_DEREFERENCE.add_transition(1, IC, 1);
		VOLATILE_IMPLICIT_TYPE_DEREFERENCE.add_transition(1, literal131, 2);
		VOLATILE_IMPLICIT_TYPE_DEREFERENCE.add_transition(2, IC, 2);
		VOLATILE_IMPLICIT_TYPE_DEREFERENCE.add_transition(2, literal57, 3);

		VOLATILE_TYPE_DEREFERENCE.add_transition(0, literal49, 1);
		VOLATILE_TYPE_DEREFERENCE.add_transition(1, IC, 1);
		VOLATILE_TYPE_DEREFERENCE.add_transition(1, literal131, 2);
		VOLATILE_TYPE_DEREFERENCE.add_transition(2, EXPRESSION, 3);
		VOLATILE_TYPE_DEREFERENCE.add_transition(2, IC, 2);
		VOLATILE_TYPE_DEREFERENCE.add_transition(3, IC, 3);
		VOLATILE_TYPE_DEREFERENCE.add_transition(3, literal57, 4);

		WHOLE_NUMBER.add_transition(0, literal37, 1);
		WHOLE_NUMBER.add_transition(0, literal38, 1);
		WHOLE_NUMBER.add_transition(0, literal39, 1);
		WHOLE_NUMBER.add_transition(0, literal40, 1);
		WHOLE_NUMBER.add_transition(0, literal41, 1);
		WHOLE_NUMBER.add_transition(0, literal42, 1);
		WHOLE_NUMBER.add_transition(0, literal43, 1);
		WHOLE_NUMBER.add_transition(0, literal44, 1);
		WHOLE_NUMBER.add_transition(0, literal45, 1);
		WHOLE_NUMBER.add_transition(1, literal35, 1);
		WHOLE_NUMBER.add_transition(1, literal37, 1);
		WHOLE_NUMBER.add_transition(1, literal38, 1);
		WHOLE_NUMBER.add_transition(1, literal39, 1);
		WHOLE_NUMBER.add_transition(1, literal40, 1);
		WHOLE_NUMBER.add_transition(1, literal41, 1);
		WHOLE_NUMBER.add_transition(1, literal42, 1);
		WHOLE_NUMBER.add_transition(1, literal43, 1);
		WHOLE_NUMBER.add_transition(1, literal44, 1);
		WHOLE_NUMBER.add_transition(1, literal45, 1);

		WS.add_transition(0, parlex::builtins::white_space, 1);
		WS.add_transition(1, parlex::builtins::white_space, 1);

		XML_DOC_STRING.add_transition(0, literal78, 1);
		XML_DOC_STRING.add_transition(0, literal79, 2);
		XML_DOC_STRING.add_transition(1, XML_DOC_STRING, 3);
		XML_DOC_STRING.add_transition(2, literal79, 4);
		XML_DOC_STRING.add_transition(2, parlex::builtins::all, 2);
		XML_DOC_STRING.add_transition(3, literal78, 4);

		XOR.add_transition(0, EXPRESSION, 1);
		XOR.add_transition(1, IC, 1);
		XOR.add_transition(1, literal133, 2);
		XOR.add_transition(1, literal179, 2);
		XOR.add_transition(2, EXPRESSION, 3);
		XOR.add_transition(2, IC, 2);
	});

	return g;
}

