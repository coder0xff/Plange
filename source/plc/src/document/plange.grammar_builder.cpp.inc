parlex::builder("STATEMENT_SCOPE", {
	parlex::production("ADDITION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("+"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("ADD_SUB",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("±"),
				parlex::literal("+-")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("ALL",
		parlex::sequence({
			parlex::choice({
				parlex::literal("∀"),
				parlex::literal("all")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("ALLOCATION",
		parlex::sequence({
			parlex::literal("alloc"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("PARENTHETICAL_INVOCATION")
		})),
	parlex::production("AND",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∧"),
				parlex::literal("and")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any, parlex::filter_function(), {"IFF", "IMPLICATION", "OR", "XOR", }),
	parlex::production("ARGUMENT",
		parlex::reference("EXPRESSION")),
	parlex::production("ARGUMENT_PACK",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("...")
		})),
	parlex::production("ARRAY",
		parlex::sequence({
			parlex::literal("["),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("EXPRESSION", "EXPRESSION"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(","),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("EXPRESSION", "EXPRESSION")
						})
					),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal("]")
		})),
	parlex::production("ARRAY_INDEXER",
		parlex::sequence({
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::reference("ARGUMENT"),
				parlex::reference("ARGUMENT_PACK"),
				parlex::reference("SLICE")
			})
		})),
	parlex::production("ARRAY_INVOCATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::literal("["),
			parlex::optional(
				parlex::reference("ARRAY_INDEXER", "ARRAY_INDEXER")
			),
			parlex::repetition(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(","),
					parlex::optional(
						parlex::reference("ARRAY_INDEXER", "ARRAY_INDEXER")
					)
				})
			),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("]")
		})),
	parlex::production("ASM_EXPRESSION",
		parlex::choice({
			parlex::reference("ASM_IDENTIFIER"),
			parlex::reference("ASM_PTR_ARITHMETIC_ATT"),
			parlex::reference("ASM_PTR_ARITHMETIC_INTEL"),
			parlex::reference("NON_FRACTIONAL")
		})),
	parlex::production("ASM_FUNCTION",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::literal("("),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::optional(
						parlex::sequence({
							parlex::reference("PARAMETER"),
							parlex::repetition(
								parlex::sequence({
									parlex::repetition(
										parlex::reference("IC")
									),
									parlex::literal(","),
									parlex::repetition(
										parlex::reference("IC")
									),
									parlex::reference("PARAMETER")
								})
							),
							parlex::repetition(
								parlex::reference("IC")
							)
						})
					),
					parlex::literal(")"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::reference("FUNCTION_MODIFIER_0")
			),
			parlex::literal("asm"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("{"),
			parlex::reference("ASM_SCOPE"),
			parlex::literal("}")
		})),
	parlex::production("ASM_IDENTIFIER",
		parlex::sequence({
			parlex::optional(
				parlex::literal("%")
			),
			parlex::reference("IDENTIFIER")
		})),
	parlex::production("ASM_OP",
		parlex::sequence({
			parlex::reference("lowercase_letter"),
			parlex::repetition(
				parlex::reference("lowercase_letter")
			)
		})),
	parlex::production("ASM_PTR_ARITHMETIC_ATT",
		parlex::choice({
			parlex::sequence({
				parlex::reference("ASM_IDENTIFIER"),
				parlex::literal(":"),
				parlex::reference("NON_FRACTIONAL")
			}),
			parlex::sequence({
				parlex::reference("ASM_IDENTIFIER"),
				parlex::literal(":"),
				parlex::reference("NON_FRACTIONAL"),
				parlex::reference("ASM_PTR_ARITHMETIC_ATT_REG")
			}),
			parlex::sequence({
				parlex::reference("NON_FRACTIONAL"),
				parlex::reference("ASM_PTR_ARITHMETIC_ATT_REG")
			})
		})),
	parlex::production("ASM_PTR_ARITHMETIC_ATT_REG",
		parlex::sequence({
			parlex::literal("("),
			parlex::optional(
				parlex::reference("ASM_IDENTIFIER")
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal(","),
					parlex::reference("ASM_IDENTIFIER"),
					parlex::optional(
						parlex::sequence({
							parlex::literal(","),
							parlex::reference("NON_NEG_NON_FRACTIONAL")
						})
					)
				})
			),
			parlex::literal(")")
		})),
	parlex::production("ASM_PTR_ARITHMETIC_INTEL",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::choice({
						parlex::literal("BYTE"),
						parlex::literal("WORD"),
						parlex::literal("DWORD"),
						parlex::literal("QWORD")
					}),
					parlex::literal(" PTR")
				})
			),
			parlex::literal("["),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ASM_IDENTIFIER"),
					parlex::literal(":")
				})
			),
			parlex::reference("ASM_IDENTIFIER"),
			parlex::optional(
				parlex::sequence({
					parlex::literal("+"),
					parlex::reference("ASM_IDENTIFIER"),
					parlex::optional(
						parlex::sequence({
							parlex::literal("*"),
							parlex::reference("NON_NEG_NON_FRACTIONAL")
						})
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::choice({
						parlex::literal("+"),
						parlex::literal("-")
					}),
					parlex::reference("NON_NEG_INTEGER")
				})
			),
			parlex::literal("]")
		})),
	parlex::production("ASM_SCOPE",
		parlex::repetition(
			parlex::choice({
				parlex::reference("IC"),
				parlex::reference("ASM_STATEMENT")
			})
		)),
	parlex::production("ASM_STATEMENT",
		parlex::sequence({
			parlex::reference("ASM_OP"),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("ASM_EXPRESSION"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(","),
							parlex::optional(
								parlex::sequence({
									parlex::repetition(
										parlex::reference("IC")
									),
									parlex::reference("ASM_EXPRESSION")
								})
							)
						})
					)
				})
			),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("\n")
		})),
	parlex::production("ASSIGNMENT_CHAIN",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING", "XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("IDENTIFIER", "IDENTIFIER"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("←"),
				parlex::literal("<-")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::reference("EXPRESSION", "EXPRESSION"),
				parlex::reference("ASSIGNMENT_CHAIN")
			})
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", "LESSER_CHAIN", }),
	parlex::production("ATTRIBUTE",
		parlex::sequence({
			parlex::literal("@"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("@")
		})),
	parlex::production("BIJECTION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("↔"),
				parlex::literal("<->")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("BINARY_ARITHMETIC_OP",
		parlex::choice({
			parlex::reference("ADD_SUB"),
			parlex::reference("ADDITION"),
			parlex::reference("DIVISION"),
			parlex::reference("EXPONENTIATION"),
			parlex::reference("INTEGER_DIVISION"),
			parlex::reference("MODULATION"),
			parlex::reference("MULTIPLICATIVE_OP"),
			parlex::reference("SHIFTL"),
			parlex::reference("SHIFTR"),
			parlex::reference("SUBTRACTION")
		})),
	parlex::production("BINARY_COLLECTION_OP",
		parlex::choice({
			parlex::reference("BIJECTION"),
			parlex::reference("INTERSECTION"),
			parlex::reference("SYMMETRIC_DIFFERENCE"),
			parlex::reference("UNION")
		})),
	parlex::production("BINARY_LOGICAL_OP",
		parlex::choice({
			parlex::reference("AND"),
			parlex::reference("IFF"),
			parlex::reference("IMPLICATION"),
			parlex::reference("MAPS_TO"),
			parlex::reference("NAND"),
			parlex::reference("NOR"),
			parlex::reference("OR"),
			parlex::reference("XOR")
		})),
	parlex::production("BINARY_OP",
		parlex::choice({
			parlex::reference("BINARY_ARITHMETIC_OP"),
			parlex::reference("BINARY_COLLECTION_OP"),
			parlex::reference("BINARY_LOGICAL_OP"),
			parlex::reference("BITWISE_OP"),
			parlex::reference("CONSTRUCTIVE_OP"),
			parlex::reference("RELATIONAL_OP")
		})),
	parlex::production("BITWISE_OP",
		parlex::choice({
			parlex::reference("BIT_AND"),
			parlex::reference("BIT_OR"),
			parlex::reference("BIT_XOR")
		})),
	parlex::production("BIT_AND",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("&&"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("BIT_NOT",
		parlex::sequence({
			parlex::literal("~~"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("BIT_OR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("||"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("BIT_XOR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("^^"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("BLOCK",
		parlex::sequence({
			parlex::literal("{"),
			parlex::reference("STATEMENT_SCOPE"),
			parlex::literal("}")
		})),
	parlex::production("BOOL",
		parlex::choice({
			parlex::literal("true"),
			parlex::literal("false")
		})),
	parlex::production("BREAK",
		parlex::sequence({
			parlex::literal("break"),
			parlex::optional(
				parlex::choice({
					parlex::sequence({
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::literal("["),
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::reference("EXPRESSION", "EXPRESSION"),
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::literal("]")
					}),
					parlex::sequence({
						parlex::repetition(
							parlex::reference("ICR")
						),
						parlex::reference("IDENTIFIER", "IDENTIFIER")
					})
				})
			)
		})),
	parlex::production("CARDINALITY",
		parlex::sequence({
			parlex::literal("#"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", }),
	parlex::production("CAST",
		parlex::sequence({
			parlex::reference("PARENTHETICAL"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", }),
	parlex::production("CASTS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("casts"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("CEILING",
		parlex::choice({
			parlex::sequence({
				parlex::literal("⌈"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("⌉")
			}),
			parlex::sequence({
				parlex::literal("|\'"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("\'|")
			})
		})),
	parlex::production("COMMENT",
		parlex::sequence({
			parlex::literal("/*"),
			parlex::repetition(
				parlex::reference("all")
			),
			parlex::literal("*/")
		})),
	parlex::production("COMPLEMENT",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("ᶜ")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", }),
	parlex::production("COMPOSITION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∘"),
				parlex::literal("_o_")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("COMPOUND",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("|"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("CONDITIONAL",
		parlex::sequence({
			parlex::reference("condition", "EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("\?"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("true_case", "EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(":"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("false_case", "EXPRESSION")
		}),
		parlex::associativity::right),
	parlex::production("CONSTRUCTIVE_OP",
		parlex::choice({
			parlex::reference("COMPOSITION"),
			parlex::reference("COMPOUND"),
			parlex::reference("PREPEND"),
			parlex::reference("NULL_COALESCE")
		})),
	parlex::production("CONTINUE",
		parlex::sequence({
			parlex::literal("continue"),
			parlex::optional(
				parlex::choice({
					parlex::sequence({
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::literal("["),
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::reference("EXPRESSION", "EXPRESSION"),
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::literal("]")
					}),
					parlex::sequence({
						parlex::repetition(
							parlex::reference("ICR")
						),
						parlex::reference("IDENTIFIER", "IDENTIFIER")
					})
				})
			)
		})),
	parlex::production("CROSS_PRODUCT",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("×"),
				parlex::literal("_x_")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left, parlex::filter_function(), {"DOT_PRODUCT", }),
	parlex::production("DATE",
		parlex::choice({
			parlex::reference("DATE_YEAR_MONTH_DAY"),
			parlex::reference("DATE_YEAR_DAY")
		})),
	parlex::production("DATE_TIME",
		parlex::sequence({
			parlex::reference("DATE"),
			parlex::literal("T"),
			parlex::reference("TIME")
		})),
	parlex::production("DATE_YEAR_DAY",
		parlex::sequence({
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::literal("-"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit")
		})),
	parlex::production("DATE_YEAR_MONTH_DAY",
		parlex::sequence({
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::literal("-"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::literal("-"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit")
		}),
		parlex::associativity::none, parlex::filter_function(), {"SUBTRACTION", }),
	parlex::production("DECLARATION",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING", "XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("IDENTIFIER", "IDENTIFIER")
		})),
	parlex::production("DEFINITION",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING", "XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("IDENTIFIER", "IDENTIFIER"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(":="),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION", "EXPRESSION")
		})),
	parlex::production("DELTA",
		parlex::sequence({
			parlex::choice({
				parlex::literal("Δ"),
				parlex::literal("_delta_")
			}),
			parlex::optional(
				parlex::sequence({
					parlex::literal("^"),
					parlex::reference("WHOLE_NUMBER", "WHOLE_NUMBER")
				})
			),
			parlex::reference("EXPRESSION", "EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "EXPONENTIATION", }),
	parlex::production("DIMENSION",
		parlex::choice({
			parlex::reference("IDENTIFIER"),
			parlex::reference("DIMENSIONAL_ANALYSIS_OP")
		})),
	parlex::production("DIMENSIONAL_ANALYSIS_OP",
		parlex::choice({
			parlex::reference("UNIT_DIVISION"),
			parlex::reference("UNIT_EXPONENTIATION"),
			parlex::reference("UNIT_MULTIPLICATION")
		})),
	parlex::production("DIMENSIONAL_NUMBER",
		parlex::sequence({
			parlex::reference("NON_NEG_NUMBER"),
			parlex::reference("DIMENSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "EXPONENTIATION", }),
	parlex::production("DIVISION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("÷"),
				parlex::literal("/")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left, parlex::filter_function(), {"ADDITION", "ADD_SUB", "INTEGER_DIVISION", "MODULATION", "SUBTRACTION", }),
	parlex::production("DO",
		parlex::sequence({
			parlex::literal("do"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION", "EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::choice({
						parlex::literal("while"),
						parlex::literal("until")
					}),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("condition", "PARENTHETICAL")
				})
			)
		})),
	parlex::production("DOT_PRODUCT",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("⋅"),
				parlex::literal("_dot_")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("DOWNCASTS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("downcasts"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("EMBEDDED_COMMENT",
		parlex::sequence({
			parlex::literal("/***"),
			parlex::reference("EMBEDDED_COMMENT_INTERIOR"),
			parlex::literal("***/")
		}),
		parlex::associativity::none, parlex::filter_function(), {"COMMENT", }),
	parlex::production("EMBEDDED_COMMENT_INTERIOR",
		parlex::choice({
			parlex::reference("PAYLOAD"),
			parlex::sequence({
				parlex::literal("*"),
				parlex::reference("EMBEDDED_COMMENT_INTERIOR"),
				parlex::literal("*")
			})
		})),
	parlex::production("EMBEDDED_NEWLINE_STRING",
		parlex::sequence({
			parlex::literal("\"\"\""),
			parlex::reference("EMBEDDED_NEWLINE_STRING_INTERIOR"),
			parlex::literal("\"\"\"")
		}),
		parlex::associativity::none, parlex::filter_function(), {"EMBEDDED_STRING", "STRING", }),
	parlex::production("EMBEDDED_NEWLINE_STRING_INTERIOR",
		parlex::choice({
			parlex::sequence({
				parlex::literal("\n"),
				parlex::reference("PAYLOAD"),
				parlex::literal("\n")
			}),
			parlex::sequence({
				parlex::literal("\""),
				parlex::reference("EMBEDDED_NEWLINE_STRING_INTERIOR"),
				parlex::literal("\"")
			})
		})),
	parlex::production("EMBEDDED_STRING",
		parlex::sequence({
			parlex::literal("\"\"\""),
			parlex::reference("EMBEDDED_STRING_INTERIOR"),
			parlex::literal("\"\"\"")
		}),
		parlex::associativity::none, parlex::filter_function(), {"STRING", }),
	parlex::production("EMBEDDED_STRING_INTERIOR",
		parlex::choice({
			parlex::reference("PAYLOAD"),
			parlex::sequence({
				parlex::literal("\""),
				parlex::reference("EMBEDDED_STRING_INTERIOR"),
				parlex::literal("\"")
			})
		})),
	parlex::production("END_OF_LINE_COMMENT",
		parlex::sequence({
			parlex::literal("//"),
			parlex::repetition(
				parlex::reference("not_newline")
			),
			parlex::literal("\n")
		})),
	parlex::production("ENUM",
		parlex::sequence({
			parlex::literal("enum"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("inheriting"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("INHERITANCE_LIST"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("implementing"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("INHERITANCE_LIST"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal("{"),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ENUM_ELEMENT", "ENUM_ELEMENT"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(";"),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("ENUM_ELEMENT", "ENUM_ELEMENT")
						})
					)
				})
			),
			parlex::literal("}")
		})),
	parlex::production("ENUM_ELEMENT",
		parlex::sequence({
			parlex::reference("IDENTIFIER", "IDENTIFIER"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(":="),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION", "EXPRESSION")
				})
			)
		})),
	parlex::production("EQUALITY_CHAIN",
		parlex::sequence({
			parlex::reference("EXPRESSION", "EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EQUALITY_CHAIN_LOOP", "EQUALITY_CHAIN_LOOP")
		}),
		parlex::associativity::none, parlex::filter_function(), {"GREATER_CHAIN", "LESSER_CHAIN", "SUBSET_CHAIN", "SUPERSET_CHAIN", }),
	parlex::production("EQUALITY_CHAIN_LOOP",
		parlex::sequence({
			parlex::literal("="),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION", "EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EQUALITY_CHAIN_LOOP", "EQUALITY_CHAIN_LOOP")
				})
			)
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", }),
	parlex::production("EXACTLY",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("exactly"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("EXISTS",
		parlex::sequence({
			parlex::choice({
				parlex::literal("∃"),
				parlex::literal("exists")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("EXISTS_ONE",
		parlex::sequence({
			parlex::choice({
				parlex::literal("∃!"),
				parlex::literal("exists!")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("EXPONENTIATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("^"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::right, parlex::filter_function(), {"ADDITION", "ADD_SUB", "DIVISION", "INTEGER_DIVISION", "MODULATION", "MULTIPLICATIVE_OP", "SUBTRACTION", }),
	parlex::production("EXPRESSION",
		parlex::choice({
			parlex::reference("ARRAY"),
			parlex::reference("ASM_FUNCTION"),
			parlex::reference("BINARY_OP"),
			parlex::reference("BOOL"),
			parlex::reference("CAST"),
			parlex::reference("CEILING"),
			parlex::reference("COMPLEMENT"),
			parlex::reference("CONDITIONAL"),
			parlex::reference("DATE"),
			parlex::reference("DATE_TIME"),
			parlex::reference("DELTA"),
			parlex::reference("DIMENSIONAL_NUMBER"),
			parlex::reference("EMBEDDED_STRING"),
			parlex::reference("ENUM"),
			parlex::reference("EQUALITY_CHAIN"),
			parlex::reference("FLOOR"),
			parlex::reference("FUNCTION"),
			parlex::reference("GREATER_CHAIN"),
			parlex::reference("IDENTIFIER"),
			parlex::reference("IF"),
			parlex::reference("INVOCATION"),
			parlex::reference("LESSER_CHAIN"),
			parlex::reference("LIST"),
			parlex::reference("MAGNITUDE"),
			parlex::reference("MAP"),
			parlex::reference("MEMBER_ACCESS"),
			parlex::reference("NEAREST_INTEGER"),
			parlex::reference("NON_NEG_NUMBER"),
			parlex::reference("OBJECT"),
			parlex::reference("PARENTHETICAL"),
			parlex::reference("RANGE"),
			parlex::reference("REGEX"),
			parlex::reference("SET"),
			parlex::reference("SET_COMPREHENSION"),
			parlex::reference("STRING"),
			parlex::reference("SUBSET_CHAIN"),
			parlex::reference("SUPERSET_CHAIN"),
			parlex::reference("SWIZZLE"),
			parlex::reference("THIS"),
			parlex::reference("THIS_FUNC"),
			parlex::reference("THIS_TYPE"),
			parlex::reference("TIME"),
			parlex::reference("TUPLE"),
			parlex::reference("TYPE"),
			parlex::reference("UNARY_OP"),
			parlex::reference("VECTOR_NORM"),
			parlex::literal("context"),
			parlex::literal("null")
		})),
	parlex::production("FACTORIAL",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("!")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", }),
	parlex::production("FLOOR",
		parlex::choice({
			parlex::sequence({
				parlex::literal("⌊"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION", "EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("⌋")
			}),
			parlex::sequence({
				parlex::literal("|_"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION", "EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("_|")
			})
		})),
	parlex::production("FOR",
		parlex::sequence({
			parlex::literal("for"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("("),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("initializer", "STATEMENT_SCOPE"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("condition", "EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(";"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional("step", 
				parlex::sequence({
					parlex::reference("ASSIGNMENT_CHAIN"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(","),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("ASSIGNMENT_CHAIN")
						})
					),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal(")"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("FOR_COLLECTION",
		parlex::sequence({
			parlex::literal("for"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("("),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::sequence("declaration", {
					parlex::optional(
						parlex::sequence({
							parlex::choice({
								parlex::reference("TYPE_DEREFERENCE"),
								parlex::reference("IMPLICIT_TYPE_DEREFERENCE")
							}),
							parlex::repetition(
								parlex::reference("IC")
							)
						})
					),
					parlex::reference("IDENTIFIER")
				}),
				parlex::reference("EXPRESSION", "EXPRESSION")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("in"),
				parlex::literal("∈")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("collection", "EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(")"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("invoke", "EXPRESSION")
		})),
	parlex::production("FREE",
		parlex::sequence({
			parlex::literal("free"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("FUNCTION",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::literal("("),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::optional(
						parlex::sequence({
							parlex::reference("PARAMETER", "PARAMETER"),
							parlex::repetition(
								parlex::sequence({
									parlex::repetition(
										parlex::reference("IC")
									),
									parlex::literal(","),
									parlex::repetition(
										parlex::reference("IC")
									),
									parlex::reference("PARAMETER", "PARAMETER")
								})
							),
							parlex::repetition(
								parlex::reference("IC")
							)
						})
					),
					parlex::literal(")"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("FUNCTION_MODIFIER_0"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("BLOCK", "BLOCK")
		}),
		parlex::associativity::none, parlex::filter_function(), {"CAST", }),
	parlex::production("FUNCTION_MODIFIER_0",
		parlex::choice({
			parlex::reference("FUNCTION_MODIFIER_STABILITY"),
			parlex::reference("FUNCTION_MODIFIER_1")
		})),
	parlex::production("FUNCTION_MODIFIER_1",
		parlex::choice({
			parlex::reference("FUNCTION_MODIFIER_THROWING"),
			parlex::reference("FUNCTION_MODIFIER_2")
		})),
	parlex::production("FUNCTION_MODIFIER_2",
		parlex::choice({
			parlex::reference("FUNCTION_MODIFIER_ATOMIC"),
			parlex::reference("FUNCTION_MODIFIER_3")
		})),
	parlex::production("FUNCTION_MODIFIER_3",
		parlex::choice({
			parlex::reference("FUNCTION_MODIFIER_PLATFORM"),
			parlex::reference("FUNCTION_MODIFIER_4")
		})),
	parlex::production("FUNCTION_MODIFIER_4",
		parlex::choice({
			parlex::reference("FUNCTION_MODIFIER_MODEL"),
			parlex::reference("FUNCTION_MODIFIER_CALLING_CONVENTION")
		})),
	parlex::production("FUNCTION_MODIFIER_ATOMIC",
		parlex::sequence({
			parlex::literal("atomic", "atomic"),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("FUNCTION_MODIFIER_3")
				})
			)
		})),
	parlex::production("FUNCTION_MODIFIER_CALLING_CONVENTION",
		parlex::choice({
			parlex::literal("c_call"),
			parlex::literal("fast_call"),
			parlex::literal("cold_call"),
			parlex::literal("ghc_call"),
			parlex::literal("hipe_call"),
			parlex::literal("webkit_js_call"),
			parlex::literal("any_reg_call"),
			parlex::literal("preserve_most_call"),
			parlex::literal("preserve_all_call"),
			parlex::literal("swift_call"),
			parlex::literal("cxx_fast_tls_call"),
			parlex::literal("first_target_call"),
			parlex::literal("x86_std_call"),
			parlex::literal("X86_fast_call"),
			parlex::literal("arm_apcs_call"),
			parlex::literal("arm_aapcs_call"),
			parlex::literal("arm_aapcs_vfp_call"),
			parlex::literal("msp430_intr_call"),
			parlex::literal("x86_this_call"),
			parlex::literal("ptx_kernel_call"),
			parlex::literal("ptx_device_call"),
			parlex::literal("spir_func_call"),
			parlex::literal("spir_kernel_call"),
			parlex::literal("intel_ocl_bi_call"),
			parlex::literal("x86_64_sysv_call"),
			parlex::literal("x86_64_win64_call"),
			parlex::literal("x86_vector_call"),
			parlex::literal("hhvm_call"),
			parlex::literal("x86_intr_call"),
			parlex::literal("avr_intr_call"),
			parlex::literal("avr_signal_call"),
			parlex::literal("avr_builtin_call")
		})),
	parlex::production("FUNCTION_MODIFIER_MODEL",
		parlex::sequence({
			parlex::choice("model", {
				parlex::literal("pure"),
				parlex::literal("imperative"),
				parlex::literal("opaque")
			}),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("FUNCTION_MODIFIER_CALLING_CONVENTION")
				})
			)
		})),
	parlex::production("FUNCTION_MODIFIER_PLATFORM",
		parlex::sequence({
			parlex::reference("PLATFORM"),
			parlex::repetition(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("PLATFORM")
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("FUNCTION_MODIFIER_4")
				})
			)
		})),
	parlex::production("FUNCTION_MODIFIER_STABILITY",
		parlex::sequence({
			parlex::choice("stability", {
				parlex::literal("stable"),
				parlex::literal("unstable")
			}),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("FUNCTION_MODIFIER_1")
				})
			)
		})),
	parlex::production("FUNCTION_MODIFIER_THROWING",
		parlex::sequence({
			parlex::literal("throwing", "throwing"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("ARRAY")
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("ICR"),
					parlex::reference("FUNCTION_MODIFIER_2")
				})
			)
		})),
	parlex::production("GREATER_CHAIN",
		parlex::sequence({
			parlex::reference("EXPRESSION", "EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("GREATER_CHAIN_LOOP", "GREATER_CHAIN_LOOP")
		})),
	parlex::production("GREATER_CHAIN_LOOP",
		parlex::sequence({
			parlex::choice({
				parlex::literal("="),
				parlex::literal(">"),
				parlex::literal("=>"),
				parlex::literal("≥")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION", "EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("GREATER_CHAIN_LOOP", "GREATER_CHAIN_LOOP")
				})
			)
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", }),
	parlex::production("HAS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∋"),
				parlex::literal("has")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("HEX",
		parlex::sequence({
			parlex::literal("0x"),
			parlex::reference("hexadecimal_digit"),
			parlex::repetition(
				parlex::reference("hexadecimal_digit")
			)
		})),
	parlex::production("IC",
		parlex::choice({
			parlex::reference("COMMENT"),
			parlex::reference("EMBEDDED_COMMENT"),
			parlex::reference("END_OF_LINE_COMMENT"),
			parlex::reference("WS")
		})),
	parlex::production("ICR",
		parlex::sequence({
			parlex::reference("IC"),
			parlex::repetition(
				parlex::reference("IC")
			)
		})),
	parlex::production("IDENTIFIER",
		parlex::sequence({
			parlex::choice({
				parlex::reference("letter"),
				parlex::literal("_")
			}),
			parlex::repetition(
				parlex::choice({
					parlex::reference("letter"),
					parlex::reference("number"),
					parlex::literal("_")
				})
			)
		}),
		parlex::associativity::none, parlex::details::builtins().longest),
	parlex::production("IF",
		parlex::sequence({
			parlex::literal("if"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("condition", "PARENTHETICAL"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("invoke", "EXPRESSION"),
			parlex::repetition(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("elif"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("condition", "PARENTHETICAL"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("invoke", "EXPRESSION")
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("else"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("else_invoke", "EXPRESSION")
				})
			)
		})),
	parlex::production("IFF",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("⇔"),
				parlex::literal("<=>")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("IMPLEMENTS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("implements"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("IMPLICATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("⇒"),
				parlex::literal("=>")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::right, parlex::filter_function(), {"IFF", "XOR", }),
	parlex::production("IMPLICIT_TYPE_DEREFERENCE",
		parlex::sequence({
			parlex::literal("<"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(">")
		})),
	parlex::production("IMPORT",
		parlex::sequence({
			parlex::literal("import"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("IN",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∈"),
				parlex::literal("in")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("INEQUALITY",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("≠"),
				parlex::literal("/=")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("INHERITANCE_ITEM_PREFIX",
		parlex::sequence({
			parlex::choice({
				parlex::reference("VISIBILITY_MODIFIER"),
				parlex::sequence({
					parlex::reference("VISIBILITY_MODIFIER"),
					parlex::reference("ICR"),
					parlex::literal("diamond", "diamond")
				}),
				parlex::literal("diamond", "diamond")
			}),
			parlex::reference("ICR")
		})),
	parlex::production("INHERITANCE_LIST",
		parlex::sequence({
			parlex::optional(
				parlex::reference("INHERITANCE_ITEM_PREFIX")
			),
			parlex::reference("EXPRESSION", "EXPRESSION"),
			parlex::repetition(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(","),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::optional(
						parlex::reference("INHERITANCE_ITEM_PREFIX")
					),
					parlex::reference("EXPRESSION", "EXPRESSION")
				})
			)
		})),
	parlex::production("INHERITS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("inherits"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("INTEGER_DIVISION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("\\"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left, parlex::filter_function(), {"ADDITION", "ADD_SUB", "SUBTRACTION", }),
	parlex::production("INTERSECTION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("∩"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("INVOCATION",
		parlex::choice({
			parlex::reference("PARENTHETICAL_INVOCATION"),
			parlex::reference("ARRAY_INVOCATION"),
			parlex::reference("TYPE_INVOCATION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "NEGATION", "RADICAL", }),
	parlex::production("IS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("is"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("KLEENE_STAR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("*")
		})),
	parlex::production("LESSER_CHAIN",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("LESSER_CHAIN_LOOP")
		})),
	parlex::production("LESSER_CHAIN_LOOP",
		parlex::sequence({
			parlex::choice({
				parlex::literal("="),
				parlex::literal("<"),
				parlex::literal("=<"),
				parlex::literal("≤")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("LESSER_CHAIN_LOOP")
				})
			)
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", }),
	parlex::production("LIST",
		parlex::sequence({
			parlex::literal("[|"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(", "),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("EXPRESSION")
						})
					),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal("|]")
		})),
	parlex::production("LOCK",
		parlex::sequence({
			parlex::literal("lock"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("PARENTHETICAL"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("BLOCK")
		})),
	parlex::production("LOOP",
		parlex::sequence({
			parlex::choice({
				parlex::literal("while"),
				parlex::literal("until")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("PARENTHETICAL"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("MAGNITUDE",
		parlex::sequence({
			parlex::literal("|"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("|")
		})),
	parlex::production("MAP",
		parlex::sequence({
			parlex::literal("{"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(":"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(","),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("EXPRESSION"),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(":"),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("EXPRESSION")
						})
					)
				})
			),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("}")
		}),
		parlex::associativity::none, parlex::filter_function(), {"FUNCTION", }),
	parlex::production("MAPS_TO",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("→"),
				parlex::literal("->")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::right),
	parlex::production("MEMBER_ACCESS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("."),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("IDENTIFIER")
		}),
		parlex::associativity::left),
	parlex::production("MEMBER_OFFSET",
		parlex::sequence({
			parlex::literal("@"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("WHOLE_NUMBER")
		})),
	parlex::production("MODULATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("%"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left, parlex::filter_function(), {"ADDITION", "ADD_SUB", "SUBTRACTION", }),
	parlex::production("MULTIPLICATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("*"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any, parlex::filter_function(), {"MAPS_TO", }),
	parlex::production("MULTIPLICATIVE_OP",
		parlex::choice({
			parlex::reference("CROSS_PRODUCT"),
			parlex::reference("DOT_PRODUCT"),
			parlex::reference("MULTIPLICATION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"ADDITION", "ADD_SUB", "INTEGER_DIVISION", "MODULATION", "SUBTRACTION", }),
	parlex::production("NAND",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("↑"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left, parlex::filter_function(), {"IFF", "IMPLICATION", "OR", "XOR", }),
	parlex::production("NEAREST_INTEGER",
		parlex::choice({
			parlex::sequence({
				parlex::literal("⌊"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("⌉")
			}),
			parlex::sequence({
				parlex::literal("|_"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("\'|")
			})
		})),
	parlex::production("NEGATION",
		parlex::sequence({
			parlex::literal("-"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", }),
	parlex::production("NON_FRACTIONAL",
		parlex::sequence({
			parlex::optional(
				parlex::literal("-")
			),
			parlex::reference("NON_NEG_NON_FRACTIONAL")
		})),
	parlex::production("NON_NEG_FRACTIONAL",
		parlex::choice({
			parlex::sequence({
				parlex::reference("decimal_digit"),
				parlex::repetition(
					parlex::reference("decimal_digit")
				),
				parlex::literal("."),
				parlex::repetition(
					parlex::reference("decimal_digit")
				)
			}),
			parlex::sequence({
				parlex::literal("."),
				parlex::reference("decimal_digit"),
				parlex::repetition(
					parlex::reference("decimal_digit")
				)
			})
		})),
	parlex::production("NON_NEG_INTEGER",
		parlex::choice({
			parlex::sequence({
				parlex::reference("NON_ZERO_DECIMAL_DIGIT"),
				parlex::repetition(
					parlex::reference("decimal_digit")
				)
			}),
			parlex::literal("0")
		})),
	parlex::production("NON_NEG_NON_FRACTIONAL",
		parlex::choice({
			parlex::reference("NON_NEG_INTEGER"),
			parlex::reference("HEX"),
			parlex::reference("OCTAL")
		})),
	parlex::production("NON_NEG_NUMBER",
		parlex::choice({
			parlex::reference("NON_NEG_NON_FRACTIONAL"),
			parlex::reference("NON_NEG_FRACTIONAL")
		})),
	parlex::production("NON_ZERO_DECIMAL_DIGIT",
		parlex::choice({
			parlex::literal("1"),
			parlex::literal("2"),
			parlex::literal("3"),
			parlex::literal("4"),
			parlex::literal("5"),
			parlex::literal("6"),
			parlex::literal("7"),
			parlex::literal("8"),
			parlex::literal("9")
		})),
	parlex::production("NOR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("↓"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left, parlex::filter_function(), {"IFF", "IMPLICATION", "OR", "XOR", }),
	parlex::production("NOT",
		parlex::sequence({
			parlex::choice({
				parlex::literal("¬"),
				parlex::literal("~")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", }),
	parlex::production("NOT_HAS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∌"),
				parlex::literal("/has")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("NOT_IN",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∉"),
				parlex::literal("/in")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("NULL_COALESCE",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("\?\?"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("OBJECT",
		parlex::sequence({
			parlex::literal("object"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("inheriting"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("INHERITANCE_LIST"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("implementing"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("INHERITANCE_LIST"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal("{"),
			parlex::reference("TYPE_SCOPE"),
			parlex::literal("}")
		})),
	parlex::production("OCTAL",
		parlex::sequence({
			parlex::literal("0"),
			parlex::reference("octal_digit"),
			parlex::repetition(
				parlex::reference("octal_digit")
			)
		})),
	parlex::production("OR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("∨"),
				parlex::literal("or")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any, parlex::filter_function(), {"IFF", "IMPLICATION", "XOR", }),
	parlex::production("PARAMETER",
		parlex::choice({
			parlex::reference("PARAMETER_NATURAL"),
			parlex::reference("PARAMETER_ANALYTIC")
		})),
	parlex::production("PARAMETER_ANALYTIC",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("="),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION")
				})
			)
		})),
	parlex::production("PARAMETER_NATURAL",
		parlex::choice({
			parlex::sequence({
				parlex::optional(
					parlex::sequence({
						parlex::reference("TYPE_DEREFERENCE"),
						parlex::repetition(
							parlex::reference("IC")
						)
					})
				),
				parlex::reference("IDENTIFIER"),
				parlex::optional(
					parlex::literal("...")
				)
			}),
			parlex::sequence({
				parlex::optional(
					parlex::sequence({
						parlex::choice({
							parlex::reference("TYPE_DEREFERENCE"),
							parlex::reference("IMPLICIT_TYPE_DEREFERENCE")
						}),
						parlex::repetition(
							parlex::reference("IC")
						)
					})
				),
				parlex::reference("IDENTIFIER"),
				parlex::optional(
					parlex::literal("...")
				),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("="),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::optional(
					parlex::literal("...")
				)
			})
		}),
		parlex::associativity::none, parlex::filter_function(), {"PARAMETER_ANALYTIC", }),
	parlex::production("PARENTHETICAL",
		parlex::sequence({
			parlex::literal("("),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(")")
		})),
	parlex::production("PARENTHETICAL_INVOCATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("("),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::choice({
						parlex::reference("ARGUMENT"),
						parlex::reference("ARGUMENT_PACK")
					})
				})
			),
			parlex::repetition(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(","),
					parlex::optional(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::choice({
								parlex::reference("ARGUMENT"),
								parlex::reference("ARGUMENT_PACK")
							})
						})
					)
				})
			),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(")")
		})),
	parlex::production("PAYLOAD",
		parlex::reference("all")),
	parlex::production("PLATFORM",
		parlex::sequence({
			parlex::literal("_"),
			parlex::repetition(
				parlex::choice({
					parlex::reference("letter"),
					parlex::reference("number"),
					parlex::reference("PLATFORM")
				})
			)
		}),
		parlex::associativity::none, parlex::details::builtins().longest),
	parlex::production("POST_DEC",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("--")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "NEGATION", }),
	parlex::production("POST_INC",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("++")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "NEGATION", }),
	parlex::production("PREPEND",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("&"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::right),
	parlex::production("PRE_DEC",
		parlex::sequence({
			parlex::literal("--"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "NEGATION", }),
	parlex::production("PRE_INC",
		parlex::sequence({
			parlex::literal("++"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_OP", "NEGATION", }),
	parlex::production("RADICAL",
		parlex::sequence({
			parlex::literal("√"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::none, parlex::filter_function(), {"ADDITION", "ADD_SUB", "DIVISION", "INTEGER_DIVISION", "MODULATION", "MULTIPLICATIVE_OP", "SUBTRACTION", }),
	parlex::production("RANGE",
		parlex::choice({
			parlex::sequence({
				parlex::literal("("),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("..."),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::choice({
					parlex::literal("]"),
					parlex::literal(")")
				})
			}),
			parlex::sequence({
				parlex::choice({
					parlex::literal("["),
					parlex::literal("(")
				}),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("..."),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal(")")
			}),
			parlex::sequence({
				parlex::choice({
					parlex::literal("("),
					parlex::literal("[")
				}),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal("..."),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::reference("EXPRESSION"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::choice({
					parlex::literal("]"),
					parlex::literal(")")
				})
			})
		})),
	parlex::production("READ_LOCK",
		parlex::sequence({
			parlex::literal("read_lock"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("PARENTHETICAL"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("RECORD",
		parlex::sequence({
			parlex::literal("record"),
			parlex::repetition(
				parlex::reference("ICR")
			),
			parlex::reference("TYPE")
		})),
	parlex::production("REGEX",
		parlex::sequence({
			parlex::literal("R"),
			parlex::reference("STRING")
		})),
	parlex::production("RELATIONAL_COLLECTION_OP",
		parlex::choice({
			parlex::reference("HAS"),
			parlex::reference("IN"),
			parlex::reference("NOT_HAS"),
			parlex::reference("NOT_IN")
		})),
	parlex::production("RELATIONAL_OP",
		parlex::choice({
			parlex::reference("CASTS"),
			parlex::reference("DOWNCASTS"),
			parlex::reference("EXACTLY"),
			parlex::reference("IMPLEMENTS"),
			parlex::reference("INEQUALITY"),
			parlex::reference("INHERITS"),
			parlex::reference("IS"),
			parlex::reference("RELATIONAL_COLLECTION_OP"),
			parlex::reference("UPCASTS")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_LOGICAL_OP", }),
	parlex::production("RETURN",
		parlex::sequence({
			parlex::literal("return"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("["),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("]")
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION")
				})
			)
		})),
	parlex::production("SET",
		parlex::sequence({
			parlex::literal("{|"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::sequence({
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::literal(","),
							parlex::repetition(
								parlex::reference("IC")
							),
							parlex::reference("EXPRESSION")
						})
					),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal("|}")
		}),
		parlex::associativity::none, parlex::filter_function(), {"MAGNITUDE", }),
	parlex::production("SET_COMPREHENSION",
		parlex::sequence({
			parlex::literal("{"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("|"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("}")
		})),
	parlex::production("SHIFTL",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("<<"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("SHIFTR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(">>"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("SLICE",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(":"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("STATEMENT",
		parlex::sequence({
			parlex::choice({
				parlex::reference("ASSIGNMENT_CHAIN"),
				parlex::reference("BREAK"),
				parlex::reference("CONTINUE"),
				parlex::reference("DEFINITION"),
				parlex::reference("DO"),
				parlex::reference("EXPRESSION"),
				parlex::reference("FOR"),
				parlex::reference("FOR_COLLECTION"),
				parlex::reference("FREE"),
				parlex::reference("IMPORT"),
				parlex::reference("LOCK"),
				parlex::reference("LOOP"),
				parlex::reference("READ_LOCK"),
				parlex::reference("RETURN"),
				parlex::reference("THROW"),
				parlex::reference("TRY"),
				parlex::reference("TYPE_CONSTRAINT"),
				parlex::reference("WRITE_LOCK"),
				parlex::reference("USING")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(";")
		})),
	parlex::production("STATEMENT_SCOPE",
		parlex::repetition(
			parlex::choice({
				parlex::reference("IC"),
				parlex::reference("STATEMENT")
			})
		)),
	parlex::production("STRING",
		parlex::reference("c_string")),
	parlex::production("SUBSET_CHAIN",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("SUBSET_CHAIN_LOOP")
		})),
	parlex::production("SUBSET_CHAIN_LOOP",
		parlex::sequence({
			parlex::choice({
				parlex::literal("="),
				parlex::literal("⊆"),
				parlex::literal("subs"),
				parlex::literal("⊂"),
				parlex::literal("psubs")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("SUBSET_CHAIN_LOOP")
				})
			)
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", }),
	parlex::production("SUBTRACTION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("-"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("SUPERSET_CHAIN",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("SUPERSET_CHAIN_LOOP")
		})),
	parlex::production("SUPERSET_CHAIN_LOOP",
		parlex::sequence({
			parlex::choice({
				parlex::literal("="),
				parlex::literal("⊇"),
				parlex::literal("sups"),
				parlex::literal("⊃"),
				parlex::literal("psups")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("SUPERSET_CHAIN_LOOP")
				})
			)
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", }),
	parlex::production("SWIZZLE",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("⋮"),
				parlex::literal("_swiz_")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("SYMMETRIC_DIFFERENCE",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("⊖"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
	parlex::production("THIS",
		parlex::sequence({
			parlex::literal("this"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("["),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("]")
				})
			)
		})),
	parlex::production("THIS_FUNC",
		parlex::sequence({
			parlex::literal("this_func"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("["),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("]")
				})
			)
		})),
	parlex::production("THIS_TYPE",
		parlex::sequence({
			parlex::literal("this_type"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("["),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("]")
				})
			)
		})),
	parlex::production("THROW",
		parlex::sequence({
			parlex::literal("throw"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("["),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("]")
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION")
				})
			)
		})),
	parlex::production("TIME",
		parlex::sequence({
			parlex::optional(
				parlex::literal("-")
			),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::literal(":"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::literal(":"),
			parlex::reference("decimal_digit"),
			parlex::reference("decimal_digit"),
			parlex::optional(
				parlex::sequence({
					parlex::literal("."),
					parlex::reference("decimal_digit"),
					parlex::repetition(
						parlex::reference("decimal_digit")
					)
				})
			),
			parlex::optional(
				parlex::choice({
					parlex::literal("Z"),
					parlex::sequence({
						parlex::choice({
							parlex::literal("+"),
							parlex::literal("-")
						}),
						parlex::reference("decimal_digit"),
						parlex::reference("decimal_digit"),
						parlex::optional(
							parlex::sequence({
								parlex::literal(":"),
								parlex::reference("decimal_digit"),
								parlex::reference("decimal_digit")
							})
						)
					})
				})
			)
		})),
	parlex::production("TRY",
		parlex::sequence({
			parlex::literal("try"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("catch"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::sequence({
					parlex::literal("catch"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION")
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal("finally"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION")
				})
			)
		})),
	parlex::production("TUPLE",
		parlex::sequence({
			parlex::literal("(|"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(","),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("EXPRESSION")
				})
			),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("|)")
		}),
		parlex::associativity::none, parlex::filter_function(), {"MAGNITUDE", }),
	parlex::production("TYPE",
		parlex::sequence({
			parlex::literal("type"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("inheriting"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("INHERITANCE_LIST"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("implementing"),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("INHERITANCE_LIST"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::literal("{"),
			parlex::reference("TYPE_SCOPE"),
			parlex::literal("}")
		})),
	parlex::production("TYPE_CONSTRAINT",
		parlex::sequence({
			parlex::reference("TYPE_CONSTRAINT_HEAD"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("TYPE_CONSTRAINT_CHAIN")
		})),
	parlex::production("TYPE_CONSTRAINT_CHAIN",
		parlex::sequence({
			parlex::choice({
				parlex::reference("DECLARATION"),
				parlex::reference("ASSIGNMENT_CHAIN"),
				parlex::reference("DEFINITION")
			}),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(","),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("TYPE_CONSTRAINT_CHAIN")
				})
			)
		})),
	parlex::production("TYPE_CONSTRAINT_HEAD",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING", "XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::repetition(
				parlex::sequence({
					parlex::reference("ATTRIBUTE"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::reference("VISIBILITY_MODIFIER", "VISIBILITY_MODIFIER"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("static", "static"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::optional(
				parlex::sequence({
					parlex::literal("extern", "extern"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::choice("type_dereference", {
				parlex::reference("TYPE_DEREFERENCE"),
				parlex::reference("VOLATILE_TYPE_DEREFERENCE"),
				parlex::reference("IMPLICIT_TYPE_DEREFERENCE"),
				parlex::reference("VOLATILE_IMPLICIT_TYPE_DEREFERENCE")
			})
		})),
	parlex::production("TYPE_DEREFERENCE",
		parlex::sequence({
			parlex::literal("<"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(">")
		})),
	parlex::production("TYPE_INVOCATION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::sequence({
				parlex::literal("<"),
				parlex::optional(
					parlex::sequence({
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::choice({
							parlex::reference("ARGUMENT"),
							parlex::reference("ARGUMENT_PACK")
						})
					})
				),
				parlex::repetition(
					parlex::sequence({
						parlex::repetition(
							parlex::reference("IC")
						),
						parlex::literal(","),
						parlex::optional(
							parlex::sequence({
								parlex::repetition(
									parlex::reference("IC")
								),
								parlex::choice({
									parlex::reference("ARGUMENT"),
									parlex::reference("ARGUMENT_PACK")
								})
							})
						)
					})
				),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal(">")
			})
		})),
	parlex::production("TYPE_SCOPE",
		parlex::sequence({
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::repetition(
				parlex::sequence({
					parlex::reference("TYPE_STATEMENT"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			)
		})),
	parlex::production("TYPE_SCOPE_ASSIGNMENT_CHAIN",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("IDENTIFIER"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("MEMBER_OFFSET")
				})
			),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("←"),
				parlex::literal("<-")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::reference("EXPRESSION"),
				parlex::reference("ASSIGNMENT_CHAIN")
			})
		}),
		parlex::associativity::none, parlex::filter_function(), {"EXPRESSION", }),
	parlex::production("TYPE_SCOPE_DECLARATION",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::reference("IDENTIFIER"),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("MEMBER_OFFSET")
				})
			)
		})),
	parlex::production("TYPE_SCOPE_TYPE_CONSTRAINT",
		parlex::sequence({
			parlex::reference("TYPE_CONSTRAINT_HEAD"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("TYPE_SCOPE_TYPE_CONSTRAINT_CHAIN")
		}),
		parlex::associativity::none, parlex::filter_function(), {"TYPE_CONSTRAINT", }),
	parlex::production("TYPE_SCOPE_TYPE_CONSTRAINT_CHAIN",
		parlex::sequence({
			parlex::optional(
				parlex::sequence({
					parlex::reference("XML_DOC_STRING"),
					parlex::repetition(
						parlex::reference("IC")
					)
				})
			),
			parlex::choice({
				parlex::reference("TYPE_SCOPE_DECLARATION"),
				parlex::reference("TYPE_SCOPE_ASSIGNMENT_CHAIN"),
				parlex::reference("DEFINITION")
			}),
			parlex::optional(
				parlex::sequence({
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::literal(","),
					parlex::repetition(
						parlex::reference("IC")
					),
					parlex::reference("TYPE_SCOPE_TYPE_CONSTRAINT_CHAIN")
				})
			)
		})),
	parlex::production("TYPE_STATEMENT",
		parlex::choice({
			parlex::sequence({
				parlex::reference("VISIBILITY_MODIFIER"),
				parlex::repetition(
					parlex::reference("IC")
				),
				parlex::literal(":")
			}),
			parlex::reference("TYPE_SCOPE_TYPE_CONSTRAINT"),
			parlex::reference("STATEMENT")
		})),
	parlex::production("UNARY_ARITHMETIC_OP",
		parlex::choice({
			parlex::reference("FACTORIAL"),
			parlex::reference("NEGATION"),
			parlex::reference("POST_DEC"),
			parlex::reference("POST_INC"),
			parlex::reference("PRE_DEC"),
			parlex::reference("PRE_INC"),
			parlex::reference("RADICAL")
		})),
	parlex::production("UNARY_LOGICAL_OP",
		parlex::choice({
			parlex::reference("ALL"),
			parlex::reference("EXISTS"),
			parlex::reference("EXISTS_ONE"),
			parlex::reference("NOT")
		}),
		parlex::associativity::none, parlex::filter_function(), {"BINARY_LOGICAL_OP", }),
	parlex::production("UNARY_OP",
		parlex::choice({
			parlex::reference("ALLOCATION"),
			parlex::reference("CARDINALITY"),
			parlex::reference("KLEENE_STAR"),
			parlex::reference("UNARY_ARITHMETIC_OP"),
			parlex::reference("UNARY_LOGICAL_OP")
		})),
	parlex::production("UNION",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("∪"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::any),
	parlex::production("UNIT_DIVISION",
		parlex::sequence({
			parlex::reference("DIMENSION"),
			parlex::literal("/"),
			parlex::reference("DIMENSION")
		}),
		parlex::associativity::left),
	parlex::production("UNIT_EXPONENTIATION",
		parlex::sequence({
			parlex::reference("DIMENSION"),
			parlex::literal("^"),
			parlex::reference("NON_FRACTIONAL")
		}),
		parlex::associativity::right, parlex::filter_function(), {"UNIT_DIVISION", "UNIT_MULTIPLICATION", }),
	parlex::production("UNIT_MULTIPLICATION",
		parlex::sequence({
			parlex::reference("DIMENSION"),
			parlex::literal("*"),
			parlex::reference("DIMENSION")
		}),
		parlex::associativity::left),
	parlex::production("UPCASTS",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("upcasts"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("USING",
		parlex::sequence({
			parlex::literal("using"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("("),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(")"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("BLOCK")
		})),
	parlex::production("VECTOR_NORM",
		parlex::sequence({
			parlex::literal("||"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("||")
		})),
	parlex::production("VISIBILITY_MODIFIER",
		parlex::choice({
			parlex::literal("public"),
			parlex::literal("protected"),
			parlex::literal("protected internal"),
			parlex::literal("internal"),
			parlex::literal("private")
		})),
	parlex::production("VOLATILE_IMPLICIT_TYPE_DEREFERENCE",
		parlex::sequence({
			parlex::literal("<"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("volatile"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(">")
		})),
	parlex::production("VOLATILE_TYPE_DEREFERENCE",
		parlex::sequence({
			parlex::literal("<"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal("volatile"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::literal(">")
		})),
	parlex::production("WHOLE_NUMBER",
		parlex::sequence({
			parlex::choice({
				parlex::literal("1"),
				parlex::literal("2"),
				parlex::literal("3"),
				parlex::literal("4"),
				parlex::literal("5"),
				parlex::literal("6"),
				parlex::literal("7"),
				parlex::literal("8"),
				parlex::literal("9")
			}),
			parlex::repetition(
				parlex::choice({
					parlex::literal("0"),
					parlex::literal("1"),
					parlex::literal("2"),
					parlex::literal("3"),
					parlex::literal("4"),
					parlex::literal("5"),
					parlex::literal("6"),
					parlex::literal("7"),
					parlex::literal("8"),
					parlex::literal("9")
				})
			)
		})),
	parlex::production("WRITE_LOCK",
		parlex::sequence({
			parlex::literal("write_lock"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("PARENTHETICAL"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		})),
	parlex::production("WS",
		parlex::sequence({
			parlex::reference("white_space"),
			parlex::repetition(
				parlex::reference("white_space")
			)
		}),
		parlex::associativity::none, parlex::details::builtins().longest),
	parlex::production("XML_DOC_STRING",
		parlex::sequence({
			parlex::literal("```"),
			parlex::reference("XML_DOC_STRING_INTERIOR"),
			parlex::literal("```")
		})),
	parlex::production("XML_DOC_STRING_INTERIOR",
		parlex::choice({
			parlex::reference("PAYLOAD"),
			parlex::sequence({
				parlex::literal("`"),
				parlex::reference("XML_DOC_STRING_INTERIOR"),
				parlex::literal("`")
			})
		})),
	parlex::production("XOR",
		parlex::sequence({
			parlex::reference("EXPRESSION"),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::choice({
				parlex::literal("⊕"),
				parlex::literal("xor")
			}),
			parlex::repetition(
				parlex::reference("IC")
			),
			parlex::reference("EXPRESSION")
		}),
		parlex::associativity::left),
})