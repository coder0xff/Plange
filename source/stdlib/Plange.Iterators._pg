ForwardIterator <-
	type {
		<Property> value <- abstract;
		<Void -> Void> next <- abstract;
	}
|
	(<Type> T) {
		return type implementing ForwardIterator {
			<Property<T>> value <- abstract;
			<Void -> Void> next <- abstract;			
		}
	}
;

```Create an iterator for any implementor of IndexableCollection```
IndexableCollectionIterator <-
	type inheriting Iterator {
		throw NotImplementedException();
	}
;

Iterator <-
	type implementing ForwardIterator {
		<Property> value <- abstract;
		<Void -> Void> next <- abstract;
		<Void -> Void> previous <- abstract;
	}
|
	(<Type> T) {
		return type implementing Iterator, implementing ForwardIterator<T> {
			<Property<T>> value <- abstract;
			<Void -> Void> next <- abstract;
			<Void -> Void> previous <- abstract;
		}
	}
;

