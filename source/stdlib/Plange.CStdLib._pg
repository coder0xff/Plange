<Type> Div_t := type {
	<CInt> quot;
	<CInt> rem;
};

Div_t.Layout = cStdlib.Layout;

<Type> LDiv_t := type {
	<CLongInt> quot;
	<CLongInt> rem;
};

LDiv_t.Layout = cStdlib.Layout;

<Type> LLDiv_t := type {
	<CLongLongInt> quot;
	<CLongLongInt> rem;
};

LLDiv_t.Layout = cStdlib.Layout;

CSigval := type {
	<CInt> int @ 0;
	<Pointer<Void>> pointer @ 0;
};

<Type> RandomData := type {
	<Pointer<Int32>> fptr;
	<Pointer<Int32>> rptr;
	<Pointer<Int32>> state;
	<Pointer<CInt>> rand_type;
	<Pointer<CInt>> rand_deg;
	<Pointer<CInt>> rand_sep;
	<Pointer<Int32>> end_ptr;
};

RandomData.Layout = cStdlib.Layout;

<Type> Drand48Data := type {
	<Array<CUnsignedShort, 3>> __x;
	<Array<CUnsignedShort, 3>> __old_x;
	<CUnsignedShort> __c;
	<CUnsignedShort> __init;
	<CUnsignedLongLong> __a;
};

Drand48Data.Layout = cStdlib.Layout;

import Plange.CStdLib.Generated._pg;

extern <CUnsignedInt -> Pointer<Void>> malloc;

extern <CUnsignedInt * CUnsignedInt -> Pointer<Void>> calloc;

extern <Pointer<Void> * CUnsignedInt -> Pointer<Void>> realloc;

<Number -> Number> abs;
<Number -> Int> ceil;
<Number -> Number> factorial;
<Number -> Int> floor;
<Number -> Number> fmod;
<Number -> Number> cos;
<Number -> Number> sin;
<Number -> Number> tan;
<Number -> Number> acos;
<Number -> Number> asin;
<Number -> Number> atan;
<Number -> Number> cosh;
<Number -> Number> sinh;
<Number -> Number> tanh;
<Number -> Number> acosh;
<Number -> Number> asinh;
<Number -> Number> atanh;
<Number -> Number> exp;
<Number -> Number> log;
<Number -> Number> log10;
<Number -> Number> log1p;
<Number -> Number> log2;
<Number -> Number> pow;
<Number -> Number> sqrt;
