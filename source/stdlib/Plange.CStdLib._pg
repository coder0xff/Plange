<Type> Div_t := type {
	<CInt> quot;
	<CInt> rem;
};
Div_t.Layout = cStdlib.Layout;
<Type> LDiv_t = type {
	<CLongInt> quot;
	<CLongInt> rem;
};
LDiv_t.Layout = cStdlib.Layout;
<Type> LLDiv_t := type {
	<CLongLongInt> quot;
	<CLongLongInt> rem;
};
LLDiv_t.Layout = cStdlib.Layout;
CSigval := CInt | Pointer<Void>;
<Type> RandomData := type {
	<Int32> *fptr;
	<Int32> *rptr;
	<Int32> *state;
	<CInt> rand_type;
	<CInt> rand_deg;
	<CInt> rand_sep;
	<Int32> *end_ptr;
};
RandomData.Layout = cStdlib.Layout;
<Type> Drand48Data := type {
	Array<CUnsignedShort> __x(3);
	Array<CUnsignedShort> __old_x(3);
	<CUnsignedShort> __c;
	<CUnsignedShort> __init;
	<CUnsignedLongLong> __a;
};
Drand48Data.Layout = cStdlib.Layout;

import Plange.CStdLib.Generated._pg

extern <CUnsignedInt -> Pointer<Void>> malloc;
extern <CUnsignedInt * CUnsignedInt -> Pointer<Void>> calloc;
extern <Pointer<Void> * CUnsignedInt -> Pointer<Void>> realloc;
<Number -> Number> abs;
<Number -> Int> ceil;
<Number -> Number> factorial;
<Number -> Int> floor;
<Number -> Number> fmod;
<Number -> Number> cos;
<Number -> Number> sin;
<Number -> Number> tan;
<Number -> Number> acos;
<Number -> Number> asin;
<Number -> Number> atan;
<Number -> Number> cosh;
<Number -> Number> sinh;
<Number -> Number> tanh;
<Number -> Number> acosh;
<Number -> Number> asinh;
<Number -> Number> atanh;
<Number -> Number> exp;
<Number -> Number> log;
<Number -> Number> log10;
<Number -> Number> log1p;
<Number -> Number> log2;
<Number -> Number> pow;
<Number -> Number> sqrt;
